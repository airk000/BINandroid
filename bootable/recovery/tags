!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ADB_CLASS	minadbd/adb.h	372;"	d
ADB_MUTEX	minadbd/mutex_list.h	26;"	d
ADB_MUTEX	minadbd/sysdeps.h	297;"	d
ADB_MUTEX	minadbd/sysdeps.h	48;"	d
ADB_MUTEX_DEFINE	minadbd/sysdeps.h	287;"	d
ADB_MUTEX_DEFINE	minadbd/sysdeps.h	44;"	d
ADB_MUTEX_INITIALIZER	minadbd/sysdeps.h	281;"	d
ADB_PROTOCOL	minadbd/adb.h	374;"	d
ADB_SERVER_VERSION	minadbd/adb.h	39;"	d
ADB_SIDELOAD_FILENAME	minadbd/adb.h	416;"	d
ADB_SUBCLASS	minadbd/adb.h	373;"	d
ADB_TRACE	minadbd/adb.h	296;"	d
ADB_TRACING	minadbd/adb.h	321;"	d
ADB_TRACING	minadbd/adb.h	353;"	d
ADB_VERSION_MAJOR	minadbd/adb.h	36;"	d
ADB_VERSION_MINOR	minadbd/adb.h	37;"	d
ADDITIONAL_RECOVERY_FILES	Android.mk	/^ADDITIONAL_RECOVERY_FILES := $(shell echo $$ADDITIONAL_RECOVERY_FILES)$/;"	m
ARRAY_CAPACITY	dedupe/dedupe.c	25;"	d	file:
ASSUMED_UPDATE_BINARY_NAME	install.c	41;"	d	file:
ASSUMED_UPDATE_SCRIPT_NAME	install.c	42;"	d	file:
A_CLSE	minadbd/adb.h	31;"	d
A_CNXN	minadbd/adb.h	28;"	d
A_OKAY	minadbd/adb.h	30;"	d
A_OPEN	minadbd/adb.h	29;"	d
A_SYNC	minadbd/adb.h	27;"	d
A_VERSION	minadbd/adb.h	34;"	d
A_WRTE	minadbd/adb.h	32;"	d
AbortFn	edify/expr.c	/^Value* AbortFn(const char* name, State* state, int argc, Expr* argv[]) {$/;"	f
AdbTrace	minadbd/adb.h	/^} AdbTrace;$/;"	t	typeref:enum:__anon15
ApplyBSDiffPatch	applypatch/bspatch.c	/^int ApplyBSDiffPatch(const unsigned char* old_data, ssize_t old_size,$/;"	f
ApplyBSDiffPatchMem	applypatch/bspatch.c	/^int ApplyBSDiffPatchMem(const unsigned char* old_data, ssize_t old_size,$/;"	f
ApplyImagePatch	applypatch/imgpatch.c	/^int ApplyImagePatch(const unsigned char* old_data, ssize_t old_size,$/;"	f
ApplyPatchCheckFn	updater/install.c	/^Value* ApplyPatchCheckFn(const char* name, State* state,$/;"	f
ApplyPatchFn	updater/install.c	/^Value* ApplyPatchFn(const char* name, State* state, int argc, Expr* argv[]) {$/;"	f
ApplyPatchSpaceFn	updater/install.c	/^Value* ApplyPatchSpaceFn(const char* name, State* state,$/;"	f
AreChunksEqual	applypatch/imgdiff.c	/^int AreChunksEqual(ImageChunk* a, ImageChunk* b) {$/;"	f
AssertFn	edify/expr.c	/^Value* AssertFn(const char* name, State* state, int argc, Expr* argv[]) {$/;"	f
BACKGROUND_ICON_CLOCKWORK	common.h	/^  BACKGROUND_ICON_CLOCKWORK,$/;"	e	enum:__anon4
BACKGROUND_ICON_ERROR	common.h	/^  BACKGROUND_ICON_ERROR,$/;"	e	enum:__anon4
BACKGROUND_ICON_FIRMWARE_ERROR	common.h	/^  BACKGROUND_ICON_FIRMWARE_ERROR,$/;"	e	enum:__anon4
BACKGROUND_ICON_FIRMWARE_INSTALLING	common.h	/^  BACKGROUND_ICON_FIRMWARE_INSTALLING,$/;"	e	enum:__anon4
BACKGROUND_ICON_INSTALLING	common.h	/^  BACKGROUND_ICON_INSTALLING,$/;"	e	enum:__anon4
BACKGROUND_ICON_NONE	common.h	/^  BACKGROUND_ICON_NONE,$/;"	e	enum:__anon4
BACKUP	minadbd/adb.h	/^    BACKUP,$/;"	e	enum:__anon14
BINARY_IN_TABLE_SIZE	mmcutils/mmcutils.h	47;"	d
BITMAPINFO_HEADER_FMT	tools/ota/convert-to-bmp.py	/^  BITMAPINFO_HEADER_FMT= ("<"      # little-endian$/;"	v
BITMAPS	ui.c	/^static const struct { gr_surface* surface; const char *name; } BITMAPS[] = {$/;"	v	typeref:struct:__anon50	file:
BITS_PER_LONG	minui/events.c	31;"	d	file:
BITS_TO_LONGS	minui/events.c	32;"	d	file:
BLOCK_SIZE	mmcutils/mmcutils.h	34;"	d
BLOCK_SIZE	mtdutils/bml_over_mtd.c	131;"	d	file:
BLOCK_SIZE	mtdutils/mtdutils.c	573;"	d	file:
BML	flashutils/flashutils.h	/^    BML = 3$/;"	e	enum:flash_type
BMLUTILS_H_	bmlutils/bmlutils.h	2;"	d
BML_UNLOCK_ALL	bmlutils/bmlutils.c	25;"	d	file:
BMP_HEADER_FMT	tools/ota/convert-to-bmp.py	/^  BMP_HEADER_FMT = ("<"      # little-endian$/;"	v
BOARD_BML_BOOT	bmlutils/bmlutils.c	28;"	d	file:
BOARD_BML_BOOT	flashutils/flashutils.c	10;"	d	file:
BOARD_BML_RECOVERY	bmlutils/bmlutils.c	32;"	d	file:
BOARD_BML_RECOVERY	flashutils/flashutils.c	14;"	d	file:
BOARD_RECOVERY_CHAR_HEIGHT	Android.mk	/^BOARD_RECOVERY_CHAR_HEIGHT := $(shell echo $(BOARD_USE_CUSTOM_RECOVERY_FONT) | cut -d _  -f 2 | cut -d . -f 1 | cut -d x -f 2)$/;"	m
BOARD_RECOVERY_CHAR_WIDTH	Android.mk	/^BOARD_RECOVERY_CHAR_WIDTH := $(shell echo $(BOARD_USE_CUSTOM_RECOVERY_FONT) | cut -d _  -f 2 | cut -d . -f 1 | cut -d x -f 1)$/;"	m
BOARD_RECOVERY_DEFINES	Android.mk	/^BOARD_RECOVERY_DEFINES := BOARD_HAS_DUAL_SYSTEM RECOVERY_CHARGEMODE BOARD_HAS_NO_SELECT_BUTTON BOARD_UMS_LUNFILE BOARD_RECOVERY_ALWAYS_WIPES BOARD_RECOVERY_HANDLES_MOUNT BOARD_TOUCH_RECOVERY RECOVERY_EXTEND_NANDROID_MENU$/;"	m
BOARD_RECOVERY_DEFINES	bmlutils/Android.mk	/^BOARD_RECOVERY_DEFINES := BOARD_BML_BOOT BOARD_BML_RECOVERY$/;"	m
BOARD_RECOVERY_DEFINES	flashutils/Android.mk	/^BOARD_RECOVERY_DEFINES := BOARD_BML_BOOT BOARD_BML_RECOVERY$/;"	m
BOARD_RECOVERY_RFS_CHECK	utilities/Android.mk	/^  BOARD_RECOVERY_RFS_CHECK := $(shell grep rfs $(TARGET_DEVICE_DIR)\/recovery.fstab)$/;"	m
BOARD_RECOVERY_RFS_CHECK	utilities/Android.mk	/^  BOARD_RECOVERY_RFS_CHECK := $(shell grep rfs $(TARGET_RECOVERY_FSTAB))$/;"	m
BOARD_USE_CUSTOM_RECOVERY_FONT	Android.mk	/^  BOARD_USE_CUSTOM_RECOVERY_FONT := \\"font_28x28.h\\"$/;"	m
BOARD_USE_CUSTOM_RECOVERY_FONT	Android.mk	/^  BOARD_USE_CUSTOM_RECOVERY_FONT := \\"roboto_15x24.h\\"$/;"	m
BUFFER_SIZE	applypatch/imgdiff.c	513;"	d	file:
BUFFER_SIZE	verifier.c	137;"	d	file:
BUFF_DECL	minadbd/utils.h	65;"	d
BUSYBOX_BINARY	Android.mk	/^$(RECOVERY_BUSYBOX_SYMLINKS): BUSYBOX_BINARY := busybox$/;"	m
BUSYBOX_LINKS	Android.mk	/^BUSYBOX_LINKS := $(shell cat external\/busybox\/busybox-minimal.links)$/;"	m
BackupFn	edifyscripting.c	/^Value* BackupFn(const char* name, State* state, int argc, Expr* argv[]) {$/;"	f
BackupOperation	minadbd/adb.h	/^} BackupOperation;$/;"	t	typeref:enum:__anon14
BmlOverMtdReadContext	mtdutils/bml_over_mtd.c	/^typedef struct BmlOverMtdReadContext {$/;"	s	file:
BmlOverMtdReadContext	mtdutils/bml_over_mtd.c	/^} BmlOverMtdReadContext;$/;"	t	typeref:struct:BmlOverMtdReadContext	file:
BmlOverMtdWriteContext	mtdutils/bml_over_mtd.c	/^typedef struct BmlOverMtdWriteContext {$/;"	s	file:
BmlOverMtdWriteContext	mtdutils/bml_over_mtd.c	/^} BmlOverMtdWriteContext;$/;"	t	typeref:struct:BmlOverMtdWriteContext	file:
BooleanString	edify/expr.c	/^int BooleanString(const char* s) {$/;"	f
BufferExtractCookie	minzip/Zip.c	/^} BufferExtractCookie;$/;"	t	typeref:struct:__anon41	file:
Build	edify/expr.c	/^Expr* Build(Function fn, YYLTYPE loc, int count, ...) {$/;"	f
CACHE_ROOT	recovery.c	/^static const char *CACHE_ROOT = "\/cache";$/;"	v	file:
CACHE_TEMP_SOURCE	applypatch/applypatch.h	42;"	d
CENATT	minzip/Zip.c	/^    CENATT = 36,$/;"	e	enum:__anon39	file:
CENATX	minzip/Zip.c	/^    CENATX = 38,$/;"	e	enum:__anon39	file:
CENCOM	minzip/Zip.c	/^    CENCOM = 32,$/;"	e	enum:__anon39	file:
CENCRC	minzip/Zip.c	/^    CENCRC = 16,$/;"	e	enum:__anon39	file:
CENDSK	minzip/Zip.c	/^    CENDSK = 34,$/;"	e	enum:__anon39	file:
CENEXT	minzip/Zip.c	/^    CENEXT = 30,$/;"	e	enum:__anon39	file:
CENFLG	minzip/Zip.c	/^    CENFLG =  8,$/;"	e	enum:__anon39	file:
CENHDR	minzip/Zip.c	/^    CENHDR = 46,$/;"	e	enum:__anon39	file:
CENHOW	minzip/Zip.c	/^    CENHOW = 10,$/;"	e	enum:__anon39	file:
CENLEN	minzip/Zip.c	/^    CENLEN = 24,$/;"	e	enum:__anon39	file:
CENNAM	minzip/Zip.c	/^    CENNAM = 28,$/;"	e	enum:__anon39	file:
CENOFF	minzip/Zip.c	/^    CENOFF = 42,$/;"	e	enum:__anon39	file:
CENSIG	minzip/Zip.c	/^    CENSIG = 0x02014b50,      \/\/ PK12$/;"	e	enum:__anon39	file:
CENSIZ	minzip/Zip.c	/^    CENSIZ = 20,$/;"	e	enum:__anon39	file:
CENTER_ALIGN	ui.c	234;"	d	file:
CENTIM	minzip/Zip.c	/^    CENTIM = 12,$/;"	e	enum:__anon39	file:
CENVEM	minzip/Zip.c	/^    CENVEM =  4,$/;"	e	enum:__anon39	file:
CENVEM_UNIX	minzip/Zip.c	/^    CENVEM_UNIX = 3 << 8,   \/\/ the high byte of CENVEM$/;"	e	enum:__anon39	file:
CENVER	minzip/Zip.c	/^    CENVER =  6,$/;"	e	enum:__anon39	file:
CHAR_HEIGHT	ui.c	55;"	d	file:
CHAR_WIDTH	ui.c	54;"	d	file:
CHUNK_DEFLATE	applypatch/imgdiff.h	20;"	d
CHUNK_GZIP	applypatch/imgdiff.h	19;"	d
CHUNK_NORMAL	applypatch/imgdiff.h	18;"	d
CHUNK_RAW	applypatch/imgdiff.h	21;"	d
CHUNK_SIZE	minadbd/adb.h	411;"	d
COMMAND_FILE	recovery.c	/^static const char *COMMAND_FILE = "\/cache\/recovery\/command";$/;"	v	file:
CONDITION	minzip/Log.h	56;"	d
COPYBUFF_SIZE	mmcutils/mmcutils.h	46;"	d
CS_ANY	minadbd/adb.h	399;"	d
CS_BOOTLOADER	minadbd/adb.h	401;"	d
CS_DEVICE	minadbd/adb.h	402;"	d
CS_HOST	minadbd/adb.h	403;"	d
CS_NOPERM	minadbd/adb.h	405;"	d
CS_OFFLINE	minadbd/adb.h	400;"	d
CS_RECOVERY	minadbd/adb.h	404;"	d
CS_SIDELOAD	minadbd/adb.h	406;"	d
CacheSizeCheck	applypatch/applypatch.c	/^int CacheSizeCheck(size_t bytes) {$/;"	f
CalculatePartitions	utilities/sdparted	/^CalculatePartitions() {$/;"	f
ChangeDeflateChunkToNormal	applypatch/imgdiff.c	/^void ChangeDeflateChunkToNormal(ImageChunk* ch) {$/;"	f
CheckMode	applypatch/main.c	/^int CheckMode(int argc, char** argv) {$/;"	f
CheckReqs	utilities/sdparted	/^CheckReqs() {$/;"	f
CheckTableType	utilities/sdparted	/^CheckTableType() {$/;"	f
ConcatFn	edify/expr.c	/^Value* ConcatFn(const char* name, State* state, int argc, Expr* argv[]) {$/;"	f
CopyProcessArgs	minzip/Zip.c	/^} CopyProcessArgs;$/;"	t	typeref:struct:__anon40	file:
CreateBlockMapping	mtdutils/bml_over_mtd.c	/^static const unsigned short* CreateBlockMapping(const MtdPartition* pSrcPart, int srcPartStartBlock,$/;"	f	file:
CreateEmptyBlockMapping	mtdutils/bml_over_mtd.c	/^static unsigned short* CreateEmptyBlockMapping(const MtdPartition* pSrcPart)$/;"	f	file:
D	minadbd/adb.h	324;"	d
D	minadbd/adb.h	351;"	d
D	minadbd/fdevent.c	60;"	d	file:
D	minadbd/fdevent.c	81;"	d	file:
DDIR	minzip/DirUtil.c	/^typedef enum { DMISSING, DDIR, DILLEGAL } DirStatus;$/;"	e	enum:__anon45	file:
DEBUG	minadbd/fdevent.c	40;"	d	file:
DEDUPE_H	dedupe/dedupe.h	2;"	d
DEDUPE_STORE_CONTEXT	dedupe/dedupe.c	/^typedef struct DEDUPE_STORE_CONTEXT {$/;"	s	file:
DEDUPE_VERSION	dedupe/dedupe.c	24;"	d	file:
DEFAULT_ADB_LOCAL_TRANSPORT_PORT	minadbd/adb.h	370;"	d
DEFAULT_ADB_PORT	minadbd/adb.h	365;"	d
DEFAULT_ADB_PORT	minadbd/adb.h	367;"	d
DEFAULT_FILES_PROGRESS_FRACTION	common.h	/^static const float DEFAULT_FILES_PROGRESS_FRACTION = 0.4;$/;"	v
DEFAULT_IMAGE_PROGRESS_FRACTION	common.h	/^static const float DEFAULT_IMAGE_PROGRESS_FRACTION = 0.1;$/;"	v
DEFAULT_PAGE_SIZE	minzip/SysUtil.c	24;"	d	file:
DEFLATED	minzip/Zip.c	/^    DEFLATED = 8,$/;"	e	enum:__anon39	file:
DILLEGAL	minzip/DirUtil.c	/^typedef enum { DMISSING, DDIR, DILLEGAL } DirStatus;$/;"	e	enum:__anon45	file:
DMISSING	minzip/DirUtil.c	/^typedef enum { DMISSING, DDIR, DILLEGAL } DirStatus;$/;"	e	enum:__anon45	file:
DR	minadbd/adb.h	338;"	d
DR	minadbd/adb.h	352;"	d
DUALBOOT_OFFSET_SECTORS	bootloader.h	45;"	d
DUMPMAX	minadbd/adb.c	158;"	d	file:
D_lock	minadbd/adb.c	/^ADB_MUTEX_DEFINE( D_lock );$/;"	v
DeleteFn	updater/install.c	/^Value* DeleteFn(const char* name, State* state, int argc, Expr* argv[]) {$/;"	f
DirStatus	minzip/DirUtil.c	/^typedef enum { DMISSING, DDIR, DILLEGAL } DirStatus;$/;"	t	typeref:enum:__anon45	file:
DowngradeExt	utilities/sdparted	/^DowngradeExt() {$/;"	f
DumpChunks	applypatch/imgdiff.c	/^void DumpChunks(ImageChunk* chunks, int num_chunks) {$/;"	f
E2FSCK_BIN	extendedcommands.c	616;"	d	file:
E2FSCK_BIN	mmcutils/mmcutils.c	321;"	d	file:
EMMC	applypatch/applypatch.c	/^enum PartitionType { MTD, EMMC };$/;"	e	enum:PartitionType	file:
ENDCOM	minzip/Zip.c	/^    ENDCOM = 20,$/;"	e	enum:__anon39	file:
ENDHDR	minzip/Zip.c	/^    ENDHDR = 22,$/;"	e	enum:__anon39	file:
ENDOFF	minzip/Zip.c	/^    ENDOFF = 16,$/;"	e	enum:__anon39	file:
ENDSIG	minzip/Zip.c	/^    ENDSIG = 0x06054b50,     \/\/ PK56$/;"	e	enum:__anon39	file:
ENDSIZ	minzip/Zip.c	/^    ENDSIZ = 12,$/;"	e	enum:__anon39	file:
ENDSUB	minzip/Zip.c	/^    ENDSUB =  8,$/;"	e	enum:__anon39	file:
ENDTOT	minzip/Zip.c	/^    ENDTOT = 10,$/;"	e	enum:__anon39	file:
EOCD_HEADER_SIZE	verifier.c	84;"	d	file:
EXIT_CODE_BAD_BLOCKS	mtdutils/bml_over_mtd.c	134;"	d	file:
EXPAND	common.h	109;"	d
EXTCRC	minzip/Zip.c	/^    EXTCRC =  4,$/;"	e	enum:__anon39	file:
EXTENDEDCOMMAND_SCRIPT	edifyscripting.c	312;"	d	file:
EXTHDR	minzip/Zip.c	/^    EXTHDR = 16,$/;"	e	enum:__anon39	file:
EXTLEN	minzip/Zip.c	/^    EXTLEN = 12,$/;"	e	enum:__anon39	file:
EXTSIG	minzip/Zip.c	/^    EXTSIG = 0x08074b50,     \/\/ PK78$/;"	e	enum:__anon39	file:
EXTSIZ	minzip/Zip.c	/^    EXTSIZ =  8,$/;"	e	enum:__anon39	file:
EXT_HEIGHT	ui.c	56;"	d	file:
EliminateOpenFiles	applypatch/freecache.c	/^static int EliminateOpenFiles(char** files, int file_count) {$/;"	f	file:
EqualityFn	edify/expr.c	/^Value* EqualityFn(const char* name, State* state, int argc, Expr* argv[]) {$/;"	f
ErrorAbort	edify/expr.c	/^Value* ErrorAbort(State* state, const char* format, ...) {$/;"	f
Evaluate	edify/expr.c	/^char* Evaluate(State* state, Expr* expr) {$/;"	f
EvaluateValue	edify/expr.c	/^Value* EvaluateValue(State* state, Expr* expr) {$/;"	f
Expr	edify/expr.h	/^struct Expr {$/;"	s
Expr	edify/expr.h	/^typedef struct Expr Expr;$/;"	t	typeref:struct:Expr
ExprDump	edify/main.c	/^void ExprDump(int depth, Expr* n, char* script) {$/;"	f
FATAL	minadbd/fdevent.c	57;"	d	file:
FDE_ACTIVE	minadbd/fdevent.c	88;"	d	file:
FDE_CREATED	minadbd/fdevent.c	90;"	d	file:
FDE_DONT_CLOSE	minadbd/fdevent.h	29;"	d
FDE_DONT_CLOSE	minadbd/sysdeps.h	179;"	d
FDE_ERROR	minadbd/fdevent.h	25;"	d
FDE_ERROR	minadbd/sysdeps.h	178;"	d
FDE_EVENTMASK	minadbd/fdevent.c	85;"	d	file:
FDE_PENDING	minadbd/fdevent.c	89;"	d	file:
FDE_READ	minadbd/fdevent.h	23;"	d
FDE_READ	minadbd/sysdeps.h	176;"	d
FDE_STATEMASK	minadbd/fdevent.c	86;"	d	file:
FDE_TIMEOUT	minadbd/fdevent.h	26;"	d
FDE_WRITE	minadbd/fdevent.h	24;"	d
FDE_WRITE	minadbd/sysdeps.h	177;"	d
FLASHUTILS_H	flashutils/flashutils.h	2;"	d
FLASH_BML	flashutils/flashutils.h	13;"	d
FLASH_MMC	flashutils/flashutils.h	12;"	d
FLASH_MTD	flashutils/flashutils.h	11;"	d
FOOTER_SIZE	verifier.c	52;"	d	file:
FileContents	applypatch/applypatch.h	/^} FileContents;$/;"	t	typeref:struct:_FileContents
FileGetPropFn	updater/install.c	/^Value* FileGetPropFn(const char* name, State* state, int argc, Expr* argv[]) {$/;"	f
FileSink	applypatch/applypatch.c	/^ssize_t FileSink(unsigned char* data, ssize_t len, void* token) {$/;"	f
FillBuffer	applypatch/bspatch.c	/^int FillBuffer(unsigned char* buffer, int size, bz_stream* stream) {$/;"	f
FindChunkByName	applypatch/imgdiff.c	/^ImageChunk* FindChunkByName(const char* name,$/;"	f
FindExpendableFiles	applypatch/freecache.c	/^int FindExpendableFiles(char*** names, int* entries) {$/;"	f
FindFunction	edify/expr.c	/^Function FindFunction(const char* name) {$/;"	f
FindMatchingPatch	applypatch/applypatch.c	/^int FindMatchingPatch(uint8_t* sha1, const char** patch_sha1_str,$/;"	f
FinishRegistration	edify/expr.c	/^void FinishRegistration() {$/;"	f
FormatFn	edifyscripting.c	/^Value* FormatFn(const char* name, State* state, int argc, Expr* argv[]) {$/;"	f
FormatFn	updater/install.c	/^Value* FormatFn(const char* name, State* state, int argc, Expr* argv[]) {$/;"	f
FormatMenuEntry	extendedcommands.c	/^} FormatMenuEntry;$/;"	t	typeref:struct:__anon12	file:
FreeSpaceForFile	applypatch/applypatch.c	/^size_t FreeSpaceForFile(const char* filename) {$/;"	f
FreeValue	edify/expr.c	/^void FreeValue(Value* v) {$/;"	f
Function	edify/expr.h	/^typedef Value* (*Function)(const char* name, State* state,$/;"	t
GET_LWORD_FROM_BYTE	mmcutils/mmcutils.h	59;"	d
GET_PAR_NUM_FROM_POS	mmcutils/mmcutils.h	69;"	d
GO_BACK	recovery_ui.h	73;"	d
GRFont	minui/graphics.c	/^} GRFont;$/;"	t	typeref:struct:__anon20	file:
GZIP_FOOTER_LEN	applypatch/imgdiff.h	30;"	d
GZIP_HEADER_LEN	applypatch/imgdiff.h	27;"	d
GenerateTarget	applypatch/applypatch.c	/^static int GenerateTarget(FileContents* source_file,$/;"	f	file:
GetExtSize	utilities/sdparted	/^GetExtSize() {$/;"	f
GetExtType	utilities/sdparted	/^GetExtType() {$/;"	f
GetFatSize	utilities/sdparted	/^GetFatSize() {$/;"	f
GetPropFn	updater/install.c	/^Value* GetPropFn(const char* name, State* state, int argc, Expr* argv[]) {$/;"	f
GetSwapSize	utilities/sdparted	/^GetSwapSize() {$/;"	f
GreaterThanIntFn	edify/expr.c	/^Value* GreaterThanIntFn(const char* name, State* state,$/;"	f
H4	minadbd/transport_usb.c	27;"	d	file:
HASH_TOMBSTONE	minzip/Hash.h	54;"	d
HEADER_SIZE	mtdutils/mtdutils.c	575;"	d	file:
HEADER_TEXT_COLOR	ui.c	265;"	d	file:
HIGHLIGHT_DOWN	recovery_ui.h	71;"	d
HIGHLIGHT_UP	recovery_ui.h	70;"	d
HOST	minadbd/adb.c	/^int HOST = 0;$/;"	v
HashCalcFunc	minzip/Hash.h	/^typedef unsigned int (*HashCalcFunc)(const void* item);$/;"	t
HashCompareFunc	minzip/Hash.h	/^typedef int (*HashCompareFunc)(const void* tableItem, const void* looseItem);$/;"	t
HashCompute	minzip/Hash.h	/^typedef unsigned int (*HashCompute)(const void* item);$/;"	t
HashEntry	minzip/Hash.h	/^typedef struct HashEntry {$/;"	s
HashEntry	minzip/Hash.h	/^} HashEntry;$/;"	t	typeref:struct:HashEntry
HashForeachFunc	minzip/Hash.h	/^typedef int (*HashForeachFunc)(void* data, void* arg);$/;"	t
HashFreeFunc	minzip/Hash.h	/^typedef void (*HashFreeFunc)(void* ptr);$/;"	t
HashIter	minzip/Hash.h	/^typedef struct HashIter {$/;"	s
HashIter	minzip/Hash.h	/^} HashIter;$/;"	t	typeref:struct:HashIter
HashTable	minzip/Hash.h	/^typedef struct HashTable {$/;"	s
HashTable	minzip/Hash.h	/^} HashTable;$/;"	t	typeref:struct:HashTable
I	applypatch/imgdiff.c	/^  off_t* I;             \/\/ used by bsdiff$/;"	m	struct:__anon2	file:
IF_LOG	minzip/Log.h	203;"	d
IF_LOGD	minzip/Log.h	146;"	d
IF_LOGE	minzip/Log.h	170;"	d
IF_LOGI	minzip/Log.h	154;"	d
IF_LOGV	minzip/Log.h	135;"	d
IF_LOGV	minzip/Log.h	137;"	d
IF_LOGW	minzip/Log.h	162;"	d
INLINE	minzip/inline_magic.h	21;"	d
INLINE	minzip/inline_magic.h	23;"	d
INSTALL_CORRUPT	install.h	/^enum { INSTALL_SUCCESS, INSTALL_ERROR, INSTALL_CORRUPT, INSTALL_UPDATE_SCRIPT_MISSING, INSTALL_UPDATE_BINARY_MISSING };$/;"	e	enum:__anon13
INSTALL_ERROR	install.h	/^enum { INSTALL_SUCCESS, INSTALL_ERROR, INSTALL_CORRUPT, INSTALL_UPDATE_SCRIPT_MISSING, INSTALL_UPDATE_BINARY_MISSING };$/;"	e	enum:__anon13
INSTALL_SUCCESS	install.h	/^enum { INSTALL_SUCCESS, INSTALL_ERROR, INSTALL_CORRUPT, INSTALL_UPDATE_SCRIPT_MISSING, INSTALL_UPDATE_BINARY_MISSING };$/;"	e	enum:__anon13
INSTALL_UPDATE_BINARY_MISSING	install.h	/^enum { INSTALL_SUCCESS, INSTALL_ERROR, INSTALL_CORRUPT, INSTALL_UPDATE_SCRIPT_MISSING, INSTALL_UPDATE_BINARY_MISSING };$/;"	e	enum:__anon13
INSTALL_UPDATE_SCRIPT_MISSING	install.h	/^enum { INSTALL_SUCCESS, INSTALL_ERROR, INSTALL_CORRUPT, INSTALL_UPDATE_SCRIPT_MISSING, INSTALL_UPDATE_BINARY_MISSING };$/;"	e	enum:__anon13
INTENT_FILE	recovery.c	/^static const char *INTENT_FILE = "\/cache\/recovery\/intent";$/;"	v	file:
ITEM_ADVANCED	recovery_ui.h	85;"	d
ITEM_APPLY_CACHE	recovery_ui.h	82;"	d
ITEM_APPLY_EXT	recovery_ui.h	76;"	d
ITEM_APPLY_SDCARD	extendedcommands.c	113;"	d	file:
ITEM_APPLY_SDCARD	recovery_ui.h	77;"	d
ITEM_APPLY_SIDELOAD	recovery_ui.h	78;"	d
ITEM_CHOOSE_ZIP	extendedcommands.c	112;"	d	file:
ITEM_CHOOSE_ZIP_INT	extendedcommands.c	115;"	d	file:
ITEM_NANDROID	recovery_ui.h	83;"	d
ITEM_PARTITION	recovery_ui.h	84;"	d
ITEM_POWEROFF	recovery_ui.h	86;"	d
ITEM_REBOOT	recovery_ui.h	75;"	d
ITEM_SIG_CHECK	extendedcommands.c	114;"	d	file:
ITEM_WIPE_CACHE	recovery_ui.h	80;"	d
ITEM_WIPE_DATA	recovery_ui.h	79;"	d
IfElseFn	edify/expr.c	/^Value* IfElseFn(const char* name, State* state, int argc, Expr* argv[]) {$/;"	f
ImageChunk	applypatch/imgdiff.c	/^} ImageChunk;$/;"	t	typeref:struct:__anon2	file:
InequalityFn	edify/expr.c	/^Value* InequalityFn(const char* name, State* state, int argc, Expr* argv[]) {$/;"	f
InstallZipFn	edifyscripting.c	/^Value* InstallZipFn(const char* name, State* state, int argc, Expr* argv[]) {$/;"	f
Interactive	utilities/sdparted	/^Interactive() {$/;"	f
IsMountedFn	updater/install.c	/^Value* IsMountedFn(const char* name, State* state, int argc, Expr* argv[]) {$/;"	f
LAST_INSTALL_FILE	install.c	/^static const char *LAST_INSTALL_FILE = "\/cache\/recovery\/last_install";$/;"	v	file:
LAST_LOG_FILE	recovery.c	/^static const char *LAST_LOG_FILE = "\/cache\/recovery\/last_log";$/;"	v	file:
LEFT_ALIGN	ui.c	233;"	d	file:
LEFT_ALIGN_MENU	ui.c	236;"	d	file:
LIBCRECOVERY_COMMON_H	libcrecovery/common.h	2;"	d
LOAD_DENOM	minzip/Hash.c	19;"	d	file:
LOAD_NUMER	minzip/Hash.c	18;"	d	file:
LOCAL_CFLAGS	edify/Android.mk	/^LOCAL_CFLAGS := $(edify_cflags) -g -O0$/;"	m
LOCAL_CFLAGS	edify/Android.mk	/^LOCAL_CFLAGS := $(edify_cflags)$/;"	m
LOCAL_CFLAGS	minadbd/Android.mk	/^LOCAL_CFLAGS := -O2 -g -DADB_HOST=0 -Wall -Wno-unused-parameter$/;"	m
LOCAL_CFLAGS	utilities/Android.mk	/^LOCAL_CFLAGS := -Dmain=minizip_main -D__ANDROID__ -DIOAPI_NO_64$/;"	m
LOCAL_CLIENT_PREFIX	minadbd/adb.h	203;"	d
LOCAL_C_INCLUDES	bmlutils/Android.mk	/^LOCAL_C_INCLUDES := bootable\/recovery\/libcrecovery$/;"	m
LOCAL_C_INCLUDES	dedupe/Android.mk	/^LOCAL_C_INCLUDES := external\/openssl\/include$/;"	m
LOCAL_C_INCLUDES	utilities/Android.mk	/^LOCAL_C_INCLUDES := external\/zlib$/;"	m
LOCAL_FORCE_STATIC_EXECUTABLE	Android.mk	/^LOCAL_FORCE_STATIC_EXECUTABLE := true$/;"	m
LOCAL_FORCE_STATIC_EXECUTABLE	applypatch/Android.mk	/^LOCAL_FORCE_STATIC_EXECUTABLE := true$/;"	m
LOCAL_FORCE_STATIC_EXECUTABLE	dedupe/Android.mk	/^LOCAL_FORCE_STATIC_EXECUTABLE := true$/;"	m
LOCAL_FORCE_STATIC_EXECUTABLE	flashutils/Android.mk	/^LOCAL_FORCE_STATIC_EXECUTABLE := true$/;"	m
LOCAL_FORCE_STATIC_EXECUTABLE	mtdutils/Android.mk	/^LOCAL_FORCE_STATIC_EXECUTABLE := true$/;"	m
LOCAL_FORCE_STATIC_EXECUTABLE	tools/ota/Android.mk	/^LOCAL_FORCE_STATIC_EXECUTABLE := true$/;"	m
LOCAL_FORCE_STATIC_EXECUTABLE	updater/Android.mk	/^LOCAL_FORCE_STATIC_EXECUTABLE := true$/;"	m
LOCAL_MODULE	Android.mk	/^LOCAL_MODULE := killrecovery.sh$/;"	m
LOCAL_MODULE	Android.mk	/^LOCAL_MODULE := nandroid-md5.sh$/;"	m
LOCAL_MODULE	Android.mk	/^LOCAL_MODULE := recovery$/;"	m
LOCAL_MODULE	Android.mk	/^LOCAL_MODULE := verifier_test$/;"	m
LOCAL_MODULE	applypatch/Android.mk	/^LOCAL_MODULE := applypatch$/;"	m
LOCAL_MODULE	applypatch/Android.mk	/^LOCAL_MODULE := applypatch_static$/;"	m
LOCAL_MODULE	applypatch/Android.mk	/^LOCAL_MODULE := imgdiff$/;"	m
LOCAL_MODULE	applypatch/Android.mk	/^LOCAL_MODULE := libapplypatch$/;"	m
LOCAL_MODULE	bmlutils/Android.mk	/^LOCAL_MODULE := libbmlutils$/;"	m
LOCAL_MODULE	dedupe/Android.mk	/^LOCAL_MODULE := dedupe$/;"	m
LOCAL_MODULE	dedupe/Android.mk	/^LOCAL_MODULE := libdedupe$/;"	m
LOCAL_MODULE	dedupe/Android.mk	/^LOCAL_MODULE := utility_dedupe$/;"	m
LOCAL_MODULE	edify/Android.mk	/^LOCAL_MODULE := edify$/;"	m
LOCAL_MODULE	edify/Android.mk	/^LOCAL_MODULE := libedify$/;"	m
LOCAL_MODULE	flashutils/Android.mk	/^LOCAL_MODULE := dump_image$/;"	m
LOCAL_MODULE	flashutils/Android.mk	/^LOCAL_MODULE := erase_image$/;"	m
LOCAL_MODULE	flashutils/Android.mk	/^LOCAL_MODULE := flash_image$/;"	m
LOCAL_MODULE	flashutils/Android.mk	/^LOCAL_MODULE := libdump_image$/;"	m
LOCAL_MODULE	flashutils/Android.mk	/^LOCAL_MODULE := liberase_image$/;"	m
LOCAL_MODULE	flashutils/Android.mk	/^LOCAL_MODULE := libflash_image$/;"	m
LOCAL_MODULE	flashutils/Android.mk	/^LOCAL_MODULE := libflashutils$/;"	m
LOCAL_MODULE	flashutils/Android.mk	/^LOCAL_MODULE := utility_dump_image$/;"	m
LOCAL_MODULE	flashutils/Android.mk	/^LOCAL_MODULE := utility_erase_image$/;"	m
LOCAL_MODULE	flashutils/Android.mk	/^LOCAL_MODULE := utility_flash_image$/;"	m
LOCAL_MODULE	libcrecovery/Android.mk	/^LOCAL_MODULE := libcrecovery$/;"	m
LOCAL_MODULE	minadbd/Android.mk	/^LOCAL_MODULE := libminadbd$/;"	m
LOCAL_MODULE	minelf/Android.mk	/^LOCAL_MODULE := libminelf$/;"	m
LOCAL_MODULE	minui/Android.mk	/^LOCAL_MODULE := libminui$/;"	m
LOCAL_MODULE	minzip/Android.mk	/^LOCAL_MODULE := libminzip$/;"	m
LOCAL_MODULE	mmcutils/Android.mk	/^LOCAL_MODULE := libmmcutils$/;"	m
LOCAL_MODULE	mtdutils/Android.mk	/^LOCAL_MODULE := bml_over_mtd$/;"	m
LOCAL_MODULE	mtdutils/Android.mk	/^LOCAL_MODULE := libbml_over_mtd$/;"	m
LOCAL_MODULE	mtdutils/Android.mk	/^LOCAL_MODULE := libmtdutils$/;"	m
LOCAL_MODULE	tools/ota/Android.mk	/^LOCAL_MODULE := add-property-tag$/;"	m
LOCAL_MODULE	tools/ota/Android.mk	/^LOCAL_MODULE := check-lost+found$/;"	m
LOCAL_MODULE	updater/Android.mk	/^LOCAL_MODULE := updater$/;"	m
LOCAL_MODULE	utilities/Android.mk	/^LOCAL_MODULE := fat.format$/;"	m
LOCAL_MODULE	utilities/Android.mk	/^LOCAL_MODULE := fix_permissions$/;"	m
LOCAL_MODULE	utilities/Android.mk	/^LOCAL_MODULE := libminizip$/;"	m
LOCAL_MODULE	utilities/Android.mk	/^LOCAL_MODULE := parted$/;"	m
LOCAL_MODULE	utilities/Android.mk	/^LOCAL_MODULE := sdparted$/;"	m
LOCAL_MODULE_CLASS	Android.mk	/^LOCAL_MODULE_CLASS := RECOVERY_EXECUTABLES$/;"	m
LOCAL_MODULE_CLASS	dedupe/Android.mk	/^LOCAL_MODULE_CLASS := UTILITY_EXECUTABLES$/;"	m
LOCAL_MODULE_CLASS	flashutils/Android.mk	/^LOCAL_MODULE_CLASS := UTILITY_EXECUTABLES$/;"	m
LOCAL_MODULE_CLASS	mtdutils/Android.mk	/^LOCAL_MODULE_CLASS := UTILITY_EXECUTABLES$/;"	m
LOCAL_MODULE_CLASS	utilities/Android.mk	/^LOCAL_MODULE_CLASS := RECOVERY_EXECUTABLES$/;"	m
LOCAL_MODULE_PATH	Android.mk	/^LOCAL_MODULE_PATH := $(TARGET_RECOVERY_ROOT_OUT)\/sbin$/;"	m
LOCAL_MODULE_PATH	dedupe/Android.mk	/^LOCAL_MODULE_PATH := $(PRODUCT_OUT)\/utilities$/;"	m
LOCAL_MODULE_PATH	flashutils/Android.mk	/^LOCAL_MODULE_PATH := $(PRODUCT_OUT)\/utilities$/;"	m
LOCAL_MODULE_PATH	mtdutils/Android.mk	/^LOCAL_MODULE_PATH := $(PRODUCT_OUT)\/utilities$/;"	m
LOCAL_MODULE_PATH	tools/ota/Android.mk	/^LOCAL_MODULE_PATH := $(TARGET_OUT_OPTIONAL_EXECUTABLES)$/;"	m
LOCAL_MODULE_PATH	utilities/Android.mk	/^LOCAL_MODULE_PATH := $(TARGET_RECOVERY_ROOT_OUT)\/sbin$/;"	m
LOCAL_MODULE_STEM	dedupe/Android.mk	/^LOCAL_MODULE_STEM := dedupe$/;"	m
LOCAL_MODULE_STEM	flashutils/Android.mk	/^LOCAL_MODULE_STEM := dump_image$/;"	m
LOCAL_MODULE_STEM	flashutils/Android.mk	/^LOCAL_MODULE_STEM := erase_image$/;"	m
LOCAL_MODULE_STEM	flashutils/Android.mk	/^LOCAL_MODULE_STEM := flash_image$/;"	m
LOCAL_MODULE_STEM	mtdutils/Android.mk	/^LOCAL_MODULE_STEM := bml_over_mtd$/;"	m
LOCAL_MODULE_TAGS	Android.mk	/^LOCAL_MODULE_TAGS := eng$/;"	m
LOCAL_MODULE_TAGS	Android.mk	/^LOCAL_MODULE_TAGS := optional$/;"	m
LOCAL_MODULE_TAGS	Android.mk	/^LOCAL_MODULE_TAGS := tests$/;"	m
LOCAL_MODULE_TAGS	applypatch/Android.mk	/^LOCAL_MODULE_TAGS := eng$/;"	m
LOCAL_MODULE_TAGS	bmlutils/Android.mk	/^LOCAL_MODULE_TAGS := eng$/;"	m
LOCAL_MODULE_TAGS	dedupe/Android.mk	/^LOCAL_MODULE_TAGS := eng$/;"	m
LOCAL_MODULE_TAGS	flashutils/Android.mk	/^LOCAL_MODULE_TAGS := optional$/;"	m
LOCAL_MODULE_TAGS	libcrecovery/Android.mk	/^LOCAL_MODULE_TAGS := eng$/;"	m
LOCAL_MODULE_TAGS	mmcutils/Android.mk	/^LOCAL_MODULE_TAGS := eng$/;"	m
LOCAL_MODULE_TAGS	mtdutils/Android.mk	/^LOCAL_MODULE_TAGS := eng$/;"	m
LOCAL_MODULE_TAGS	tools/ota/Android.mk	/^LOCAL_MODULE_TAGS := debug$/;"	m
LOCAL_MODULE_TAGS	updater/Android.mk	/^LOCAL_MODULE_TAGS := eng$/;"	m
LOCAL_MODULE_TAGS	utilities/Android.mk	/^LOCAL_MODULE_TAGS := optional$/;"	m
LOCAL_PATH	Android.mk	/^LOCAL_PATH := $(call my-dir)$/;"	m
LOCAL_PATH	applypatch/Android.mk	/^LOCAL_PATH := $(call my-dir)$/;"	m
LOCAL_PATH	bmlutils/Android.mk	/^LOCAL_PATH := $(call my-dir)$/;"	m
LOCAL_PATH	dedupe/Android.mk	/^LOCAL_PATH := $(call my-dir)$/;"	m
LOCAL_PATH	edify/Android.mk	/^LOCAL_PATH := $(call my-dir)$/;"	m
LOCAL_PATH	flashutils/Android.mk	/^LOCAL_PATH := $(call my-dir)$/;"	m
LOCAL_PATH	libcrecovery/Android.mk	/^LOCAL_PATH := $(call my-dir)$/;"	m
LOCAL_PATH	minadbd/Android.mk	/^LOCAL_PATH:= $(call my-dir)$/;"	m
LOCAL_PATH	minelf/Android.mk	/^LOCAL_PATH := $(call my-dir)$/;"	m
LOCAL_PATH	minui/Android.mk	/^LOCAL_PATH := $(call my-dir)$/;"	m
LOCAL_PATH	minzip/Android.mk	/^LOCAL_PATH := $(call my-dir)$/;"	m
LOCAL_PATH	mmcutils/Android.mk	/^LOCAL_PATH := $(call my-dir)$/;"	m
LOCAL_PATH	mtdutils/Android.mk	/^LOCAL_PATH := $(call my-dir)$/;"	m
LOCAL_PATH	tools/ota/Android.mk	/^LOCAL_PATH := $(call my-dir)$/;"	m
LOCAL_PATH	updater/Android.mk	/^LOCAL_PATH := $(call my-dir)$/;"	m
LOCAL_PATH	utilities/Android.mk	/^LOCAL_PATH := $(call my-dir)$/;"	m
LOCAL_SHARED_LIBRARIES	flashutils/Android.mk	/^LOCAL_SHARED_LIBRARIES := libcutils libc$/;"	m
LOCAL_SRC_FILES	Android.mk	/^LOCAL_SRC_FILES := \\$/;"	m
LOCAL_SRC_FILES	Android.mk	/^LOCAL_SRC_FILES := killrecovery.sh$/;"	m
LOCAL_SRC_FILES	Android.mk	/^LOCAL_SRC_FILES := nandroid-md5.sh$/;"	m
LOCAL_SRC_FILES	Android.mk	/^LOCAL_SRC_FILES := verifier_test.c verifier.c$/;"	m
LOCAL_SRC_FILES	applypatch/Android.mk	/^LOCAL_SRC_FILES := applypatch.c bspatch.c freecache.c imgpatch.c utils.c$/;"	m
LOCAL_SRC_FILES	applypatch/Android.mk	/^LOCAL_SRC_FILES := imgdiff.c utils.c bsdiff.c$/;"	m
LOCAL_SRC_FILES	applypatch/Android.mk	/^LOCAL_SRC_FILES := main.c$/;"	m
LOCAL_SRC_FILES	bmlutils/Android.mk	/^LOCAL_SRC_FILES := bmlutils.c$/;"	m
LOCAL_SRC_FILES	dedupe/Android.mk	/^LOCAL_SRC_FILES := dedupe.c driver.c$/;"	m
LOCAL_SRC_FILES	dedupe/Android.mk	/^LOCAL_SRC_FILES := dedupe.c$/;"	m
LOCAL_SRC_FILES	dedupe/Android.mk	/^LOCAL_SRC_FILES := driver.c$/;"	m
LOCAL_SRC_FILES	edify/Android.mk	/^LOCAL_SRC_FILES := $(edify_src_files)$/;"	m
LOCAL_SRC_FILES	edify/Android.mk	/^LOCAL_SRC_FILES := \\$/;"	m
LOCAL_SRC_FILES	flashutils/Android.mk	/^LOCAL_SRC_FILES := dump_image.c$/;"	m
LOCAL_SRC_FILES	flashutils/Android.mk	/^LOCAL_SRC_FILES := erase_image.c$/;"	m
LOCAL_SRC_FILES	flashutils/Android.mk	/^LOCAL_SRC_FILES := flash_image.c$/;"	m
LOCAL_SRC_FILES	flashutils/Android.mk	/^LOCAL_SRC_FILES := flashutils.c$/;"	m
LOCAL_SRC_FILES	libcrecovery/Android.mk	/^LOCAL_SRC_FILES := system.c popen.c$/;"	m
LOCAL_SRC_FILES	minadbd/Android.mk	/^LOCAL_SRC_FILES := \\$/;"	m
LOCAL_SRC_FILES	minelf/Android.mk	/^LOCAL_SRC_FILES := \\$/;"	m
LOCAL_SRC_FILES	minui/Android.mk	/^LOCAL_SRC_FILES := resources.c$/;"	m
LOCAL_SRC_FILES	minzip/Android.mk	/^LOCAL_SRC_FILES := \\$/;"	m
LOCAL_SRC_FILES	mmcutils/Android.mk	/^LOCAL_SRC_FILES := \\$/;"	m
LOCAL_SRC_FILES	mtdutils/Android.mk	/^LOCAL_SRC_FILES := bml_over_mtd.c$/;"	m
LOCAL_SRC_FILES	mtdutils/Android.mk	/^LOCAL_SRC_FILES := mtdutils.c$/;"	m
LOCAL_SRC_FILES	tools/ota/Android.mk	/^LOCAL_SRC_FILES := add-property-tag.c$/;"	m
LOCAL_SRC_FILES	tools/ota/Android.mk	/^LOCAL_SRC_FILES := check-lost+found.c$/;"	m
LOCAL_SRC_FILES	updater/Android.mk	/^LOCAL_SRC_FILES := $(updater_src_files)$/;"	m
LOCAL_SRC_FILES	utilities/Android.mk	/^LOCAL_SRC_FILES := $(LOCAL_MODULE)$/;"	m
LOCAL_SRC_FILES	utilities/Android.mk	/^LOCAL_SRC_FILES := ..\/..\/..\/external\/zlib\/contrib\/minizip\/minizip.c ..\/..\/..\/external\/zlib\/contrib\/minizip\/zip.c ..\/..\/..\/external\/zlib\/contrib\/minizip\/ioapi.c$/;"	m
LOCAL_STATIC_LIBRARIES	Android.mk	/^LOCAL_STATIC_LIBRARIES := libmincrypt libcutils libstdc++ libc$/;"	m
LOCAL_STATIC_LIBRARIES	Android.mk	/^LOCAL_STATIC_LIBRARIES :=$/;"	m
LOCAL_STATIC_LIBRARIES	bmlutils/Android.mk	/^LOCAL_STATIC_LIBRARIES := libcrecovery$/;"	m
LOCAL_STATIC_LIBRARIES	dedupe/Android.mk	/^LOCAL_STATIC_LIBRARIES := libcrypto_static libcutils libc$/;"	m
LOCAL_STATIC_LIBRARIES	dedupe/Android.mk	/^LOCAL_STATIC_LIBRARIES := libcrypto_static$/;"	m
LOCAL_STATIC_LIBRARIES	dedupe/Android.mk	/^LOCAL_STATIC_LIBRARIES := libdedupe libcrypto_static libcutils libc$/;"	m
LOCAL_STATIC_LIBRARIES	flashutils/Android.mk	/^LOCAL_STATIC_LIBRARIES := libflashutils libmtdutils libmmcutils libbmlutils libcrecovery$/;"	m
LOCAL_STATIC_LIBRARIES	flashutils/Android.mk	/^LOCAL_STATIC_LIBRARIES := libflashutils libmtdutils libmmcutils libbmlutils libcutils libc$/;"	m
LOCAL_STATIC_LIBRARIES	flashutils/Android.mk	/^LOCAL_STATIC_LIBRARIES := libmmcutils libmtdutils libbmlutils libcrecovery$/;"	m
LOCAL_STATIC_LIBRARIES	minadbd/Android.mk	/^LOCAL_STATIC_LIBRARIES := libcutils libc$/;"	m
LOCAL_STATIC_LIBRARIES	mtdutils/Android.mk	/^LOCAL_STATIC_LIBRARIES := libmtdutils libcutils libc$/;"	m
LOCAL_STATIC_LIBRARIES	tools/ota/Android.mk	/^LOCAL_STATIC_LIBRARIES := libc$/;"	m
LOCAL_STATIC_LIBRARIES	tools/ota/Android.mk	/^LOCAL_STATIC_LIBRARIES := libcutils libc$/;"	m
LOCAL_STATIC_LIBRARIES	utilities/Android.mk	/^LOCAL_STATIC_LIBRARIES := libz$/;"	m
LOCAL_UNSTRIPPED_PATH	dedupe/Android.mk	/^LOCAL_UNSTRIPPED_PATH := $(PRODUCT_OUT)\/symbols\/utilities$/;"	m
LOCAL_UNSTRIPPED_PATH	flashutils/Android.mk	/^LOCAL_UNSTRIPPED_PATH := $(PRODUCT_OUT)\/symbols\/utilities$/;"	m
LOCAL_UNSTRIPPED_PATH	mtdutils/Android.mk	/^LOCAL_UNSTRIPPED_PATH := $(PRODUCT_OUT)\/symbols\/utilities$/;"	m
LOCAL_YACCFLAGS	edify/Android.mk	/^LOCAL_YACCFLAGS := -v$/;"	m
LOCCRC	minzip/Zip.c	/^    LOCCRC = 14,$/;"	e	enum:__anon39	file:
LOCEXT	minzip/Zip.c	/^    LOCEXT = 28,$/;"	e	enum:__anon39	file:
LOCFLG	minzip/Zip.c	/^    LOCFLG =  6,$/;"	e	enum:__anon39	file:
LOCHDR	minzip/Zip.c	/^    LOCHDR = 30,$/;"	e	enum:__anon39	file:
LOCHOW	minzip/Zip.c	/^    LOCHOW =  8,$/;"	e	enum:__anon39	file:
LOCLEN	minzip/Zip.c	/^    LOCLEN = 22,$/;"	e	enum:__anon39	file:
LOCNAM	minzip/Zip.c	/^    LOCNAM = 26,$/;"	e	enum:__anon39	file:
LOCSIG	minzip/Zip.c	/^    LOCSIG = 0x04034b50,      \/\/ PK34$/;"	e	enum:__anon39	file:
LOCSIZ	minzip/Zip.c	/^    LOCSIZ = 18,$/;"	e	enum:__anon39	file:
LOCTIM	minzip/Zip.c	/^    LOCTIM = 10,$/;"	e	enum:__anon39	file:
LOCVER	minzip/Zip.c	/^    LOCVER =  4,$/;"	e	enum:__anon39	file:
LOG	minzip/Log.h	187;"	d
LOGD	common.h	105;"	d
LOGD	minzip/Log.h	76;"	d
LOGD_IF	minzip/Log.h	80;"	d
LOGE	common.h	96;"	d
LOGE	minzip/Log.h	118;"	d
LOGE_IF	minzip/Log.h	122;"	d
LOGI	common.h	98;"	d
LOGI	minzip/Log.h	90;"	d
LOGI_IF	minzip/Log.h	94;"	d
LOGV	common.h	104;"	d
LOGV	minzip/Log.h	50;"	d
LOGV	minzip/Log.h	52;"	d
LOGVV	minzip/Log.h	69;"	d
LOGVV_IF	minzip/Log.h	70;"	d
LOGV_IF	minzip/Log.h	60;"	d
LOGV_IF	minzip/Log.h	62;"	d
LOGW	common.h	97;"	d
LOGW	minzip/Log.h	104;"	d
LOGW_IF	minzip/Log.h	108;"	d
LOG_FILE	recovery.c	/^static const char *LOG_FILE = "\/cache\/recovery\/log";$/;"	v	file:
LOG_NDEBUG	minzip/Log.h	28;"	d
LOG_NDEBUG	minzip/Log.h	30;"	d
LOG_PRI	minzip/Log.h	195;"	d
LOG_TAG	flashutils/dump_image.c	29;"	d	file:
LOG_TAG	minzip/Hash.c	11;"	d	file:
LOG_TAG	minzip/Log.h	40;"	d
LOG_TAG	minzip/SysUtil.c	15;"	d	file:
LOG_TAG	minzip/Zip.c	17;"	d	file:
LOG_TAG	mtdutils/bml_over_mtd.c	126;"	d	file:
LOG_TAG	mtdutils/bml_over_mtd.c	129;"	d	file:
LUN_FILE_EXPANDS	extendedcommands.c	434;"	d	file:
LessThanIntFn	edify/expr.c	/^Value* LessThanIntFn(const char* name, State* state, int argc, Expr* argv[]) {$/;"	f
Literal	edify/expr.c	/^Value* Literal(const char* name, State* state, int argc, Expr* argv[]) {$/;"	f
LoadFileContents	applypatch/applypatch.c	/^int LoadFileContents(const char* filename, FileContents* file,$/;"	f
LoadPartitionContents	applypatch/applypatch.c	/^static int LoadPartitionContents(const char* filename, FileContents* file) {$/;"	f	file:
LogicalAndFn	edify/expr.c	/^Value* LogicalAndFn(const char* name, State* state,$/;"	f
LogicalNotFn	edify/expr.c	/^Value* LogicalNotFn(const char* name, State* state,$/;"	f
LogicalOrFn	edify/expr.c	/^Value* LogicalOrFn(const char* name, State* state,$/;"	f
MAGIC	bootloader.c	/^    unsigned char MAGIC[UPDATE_MAGIC_SIZE];$/;"	m	struct:update_header	file:
MAX_ARGS	recovery.c	/^static const int MAX_ARGS = 100;$/;"	v	file:
MAX_ARG_LENGTH	recovery.c	/^static const int MAX_ARG_LENGTH = 4096;$/;"	v	file:
MAX_COLS	ui.c	46;"	d	file:
MAX_DEVICES	minui/events.c	28;"	d	file:
MAX_DUMP_HEX_LEN	minadbd/transport.c	38;"	d	file:
MAX_FILE_ENTRIES	mmcutils/mmcutils.h	48;"	d
MAX_FILE_GETPROP_SIZE	updater/install.c	619;"	d	file:
MAX_MISC_FDS	minui/events.c	29;"	d	file:
MAX_NUM_USB_VOLUMES	extendedcommands.c	433;"	d	file:
MAX_PARTITIONS	mmcutils/mmcutils.h	57;"	d
MAX_PAYLOAD	minadbd/adb.h	25;"	d
MAX_ROWS	ui.c	47;"	d	file:
MAX_STRING_LEN	edify/expr.h	28;"	d
MENU_HEADERS	default_recovery_ui.c	/^char* MENU_HEADERS[] = { NULL };$/;"	v
MENU_ITEMS	default_recovery_ui.c	/^char* MENU_ITEMS[] = { "重启",$/;"	v
MENU_ITEM_HEADER	ui.c	790;"	d	file:
MENU_ITEM_HEADER_LENGTH	ui.c	791;"	d	file:
MENU_MAX_COLS	ui.c	49;"	d	file:
MENU_MAX_ROWS	ui.c	50;"	d	file:
MENU_TEXT_COLOR	ui.c	263;"	d	file:
MIN	applypatch/bsdiff.c	58;"	d	file:
MINZIP_DIRUTIL_H_	minzip/DirUtil.h	18;"	d
MINZIP_GENERATE_INLINES	minzip/Inlines.c	21;"	d	file:
MINZIP_INLINE_MAGIC_H_	minzip/inline_magic.h	18;"	d
MIN_LOG_ROWS	ui.c	52;"	d	file:
MISC_COMMAND_PAGE	bootloader.c	/^static const int MISC_COMMAND_PAGE = 1;  \/\/ bootloader command is this page$/;"	v	file:
MISC_PAGES	bootloader.c	/^static const int MISC_PAGES = 3;         \/\/ number of pages to save$/;"	v	file:
MISC_REBOOT_PAGE	bootloader.c	/^static const int MISC_REBOOT_PAGE = 0; \/\/ which system to reboot is this page$/;"	v	file:
MKE2FS_BIN	extendedcommands.c	614;"	d	file:
MKE2FS_BIN	mmcutils/mmcutils.c	319;"	d	file:
MMC	flashutils/flashutils.h	/^    MMC = 2,$/;"	e	enum:flash_type
MMCUTILS_H_	mmcutils/mmcutils.h	31;"	d
MMC_BOOT_TYPE	mmcutils/mmcutils.h	50;"	d
MMC_BOOT_TYPE	mmcutils/mmcutils.h	71;"	d
MMC_DEVICENAME	mmcutils/mmcutils.c	72;"	d	file:
MMC_EXT3_TYPE	mmcutils/mmcutils.h	72;"	d
MMC_RCA	mmcutils/mmcutils.h	55;"	d
MMC_RECOVERY_TYPE	mmcutils/mmcutils.h	53;"	d
MMC_SECTOR_SIZE	bootloader.h	44;"	d
MMC_SYSTEM_TYPE	mmcutils/mmcutils.h	51;"	d
MMC_USERDATA_TYPE	mmcutils/mmcutils.h	52;"	d
MMC_VFAT_TYPE	mmcutils/mmcutils.h	73;"	d
MTD	applypatch/applypatch.c	/^enum PartitionType { MTD, EMMC };$/;"	e	enum:PartitionType	file:
MTD	flashutils/flashutils.h	/^    MTD = 1,$/;"	e	enum:flash_type
MTDUTILS_H_	mtdutils/mtdutils.h	18;"	d
MTDUTILS_MOUNTS_H_	mounts.h	18;"	d
MTD_PROC_FILENAME	mtdutils/mtdutils.c	61;"	d	file:
MZ_EXTRACT_DRY_RUN	minzip/Zip.h	/^enum { MZ_EXTRACT_FILES_ONLY = 1, MZ_EXTRACT_DRY_RUN = 2 };$/;"	e	enum:__anon44
MZ_EXTRACT_FILES_ONLY	minzip/Zip.h	/^enum { MZ_EXTRACT_FILES_ONLY = 1, MZ_EXTRACT_DRY_RUN = 2 };$/;"	e	enum:__anon44
MakeFreeSpaceOnCache	applypatch/freecache.c	/^int MakeFreeSpaceOnCache(size_t bytes_needed) {$/;"	f
MakePatch	applypatch/imgdiff.c	/^unsigned char* MakePatch(ImageChunk* src, ImageChunk* tgt, size_t* size) {$/;"	f
MemMapping	minzip/SysUtil.h	/^typedef struct MemMapping {$/;"	s
MemMapping	minzip/SysUtil.h	/^} MemMapping;$/;"	t	typeref:struct:MemMapping
MemorySink	applypatch/applypatch.c	/^ssize_t MemorySink(unsigned char* data, ssize_t len, void* token) {$/;"	f
MemorySinkInfo	applypatch/applypatch.c	/^} MemorySinkInfo;$/;"	t	typeref:struct:__anon1	file:
MergeAdjacentNormalChunks	applypatch/imgdiff.c	/^void MergeAdjacentNormalChunks(ImageChunk* chunks, int* num_chunks) {$/;"	f
MmcPartition	mmcutils/mmcutils.c	/^struct MmcPartition {$/;"	s	file:
MmcPartition	mmcutils/mmcutils.h	/^typedef struct MmcPartition MmcPartition;$/;"	t	typeref:struct:MmcPartition
MmcState	mmcutils/mmcutils.c	/^} MmcState;$/;"	t	typeref:struct:__anon46	file:
MountFn	edifyscripting.c	/^Value* MountFn(const char* name, State* state, int argc, Expr* argv[]) {$/;"	f
MountFn	updater/install.c	/^Value* MountFn(const char* name, State* state, int argc, Expr* argv[]) {$/;"	f
MountMenuEntry	extendedcommands.c	/^} MountMenuEntry;$/;"	t	typeref:struct:__anon11	file:
MountedVolume	mounts.h	/^} MountedVolume;$/;"	t	typeref:struct:__anon48
MountsState	mounts.c	/^} MountsState;$/;"	t	typeref:struct:__anon47	file:
MtdPartition	mtdutils/mtdutils.h	/^struct MtdPartition {$/;"	s
MtdPartition	mtdutils/mtdutils.h	/^typedef struct MtdPartition MtdPartition;$/;"	t	typeref:struct:MtdPartition
MtdReadContext	mtdutils/mtdutils.c	/^struct MtdReadContext {$/;"	s	file:
MtdReadContext	mtdutils/mtdutils.h	/^typedef struct MtdReadContext MtdReadContext;$/;"	t	typeref:struct:MtdReadContext
MtdState	mtdutils/mtdutils.c	/^} MtdState;$/;"	t	typeref:struct:__anon49	file:
MtdWriteContext	mtdutils/mtdutils.c	/^struct MtdWriteContext {$/;"	s	file:
MtdWriteContext	mtdutils/mtdutils.h	/^typedef struct MtdWriteContext MtdWriteContext;$/;"	t	typeref:struct:MtdWriteContext
MzPathHelper	minzip/Zip.c	/^} MzPathHelper;$/;"	t	typeref:struct:__anon42	file:
NANDROID_BACKUP_FORMAT_FILE	nandroid.h	10;"	d
NANDROID_FIELD_DEDUPE_CLEARED_SPACE	nandroid.c	70;"	d	file:
NANDROID_H	nandroid.h	2;"	d
NDEBUG	minzip/Zip.c	23;"	d	file:
NDEBUG	mtdutils/mtdutils.c	26;"	d	file:
NICE_INTERVAL	ui.c	716;"	d	file:
NORMAL_TEXT_COLOR	ui.c	264;"	d	file:
NO_ACTION	recovery_ui.h	68;"	d
NUM_BACKGROUND_ICONS	common.h	/^  NUM_BACKGROUND_ICONS$/;"	e	enum:__anon4
NUM_BUFFERS	minui/graphics.c	55;"	d	file:
NamedFunction	edify/expr.h	/^} NamedFunction;$/;"	t	typeref:struct:__anon9
OFFSET_FIRST_SEC	mmcutils/mmcutils.h	44;"	d
OFFSET_SIZE	mmcutils/mmcutils.h	45;"	d
OFFSET_STATUS	mmcutils/mmcutils.h	42;"	d
OFFSET_TYPE	mmcutils/mmcutils.h	43;"	d
OPTIONS	recovery.c	/^static const struct option OPTIONS[] = {$/;"	v	typeref:struct:option	file:
OS_PATH_SEPARATOR	minadbd/sysdeps.h	276;"	d
OS_PATH_SEPARATOR	minadbd/sysdeps.h	39;"	d
OS_PATH_SEPARATOR_STR	minadbd/sysdeps.h	277;"	d
OS_PATH_SEPARATOR_STR	minadbd/sysdeps.h	40;"	d
PIXEL_FORMAT	minui/graphics.c	43;"	d	file:
PIXEL_FORMAT	minui/graphics.c	47;"	d	file:
PIXEL_FORMAT	minui/graphics.c	51;"	d	file:
PIXEL_SIZE	minui/graphics.c	44;"	d	file:
PIXEL_SIZE	minui/graphics.c	48;"	d	file:
PIXEL_SIZE	minui/graphics.c	52;"	d	file:
PROC_MOUNTS_FILENAME	mounts.c	50;"	d	file:
PROGRESSBAR_TYPE_INDETERMINATE	ui.c	/^    PROGRESSBAR_TYPE_INDETERMINATE,$/;"	e	enum:ProgressBarType	file:
PROGRESSBAR_TYPE_NONE	ui.c	/^    PROGRESSBAR_TYPE_NONE,$/;"	e	enum:ProgressBarType	file:
PROGRESSBAR_TYPE_NORMAL	ui.c	/^    PROGRESSBAR_TYPE_NORMAL,$/;"	e	enum:ProgressBarType	file:
PUBLIC_KEYS_FILE	install.c	43;"	d	file:
PUT_LWORD_TO_BYTE	mmcutils/mmcutils.h	64;"	d
PackageExtractDirFn	updater/install.c	/^Value* PackageExtractDirFn(const char* name, State* state,$/;"	f
PackageExtractFileFn	updater/install.c	/^Value* PackageExtractFileFn(const char* name, State* state,$/;"	f
ParsePatchArgs	applypatch/main.c	/^static int ParsePatchArgs(int argc, char** argv,$/;"	f	file:
ParseSha1	applypatch/applypatch.c	/^int ParseSha1(const char* str, uint8_t* digest) {$/;"	f
PartitionSdCard	utilities/sdparted	/^PartitionSdCard() {$/;"	f
PartitionType	applypatch/applypatch.c	/^enum PartitionType { MTD, EMMC };$/;"	g	file:
Patch	applypatch/applypatch.h	/^} Patch;$/;"	t	typeref:struct:_Patch
PatchMode	applypatch/main.c	/^int PatchMode(int argc, char** argv) {$/;"	f
PrepareSdCard	utilities/sdparted	/^PrepareSdCard() {$/;"	f
PrintSha1	updater/install.c	/^static char* PrintSha1(uint8_t* digest) {$/;"	f	file:
ProcessZipEntryContentsFunction	minzip/Zip.h	/^typedef bool (*ProcessZipEntryContentsFunction)(const unsigned char *data,$/;"	t
ProgressBarType	ui.c	/^static enum ProgressBarType {$/;"	g	file:
RECOVERY_API_VERSION	Android.mk	/^RECOVERY_API_VERSION := 2$/;"	m
RECOVERY_BINARY	Android.mk	/^$(RECOVERY_SYMLINKS): RECOVERY_BINARY := $(LOCAL_MODULE)$/;"	m
RECOVERY_BUSYBOX_SYMLINKS	Android.mk	/^RECOVERY_BUSYBOX_SYMLINKS := $(addprefix $(TARGET_RECOVERY_ROOT_OUT)\/sbin\/,$(filter-out $(exclude),$(notdir $(BUSYBOX_LINKS))))$/;"	m
RECOVERY_COMMON_H	common.h	18;"	d
RECOVERY_INSTALL_H_	install.h	18;"	d
RECOVERY_LINKS	Android.mk	/^RECOVERY_LINKS := edify busybox flash_image dump_image mkyaffs2image unyaffs erase_image nandroid reboot volume setprop dedupe minizip$/;"	m
RECOVERY_NAME	Android.mk	/^RECOVERY_NAME := ClockworkMod Recovery$/;"	m
RECOVERY_NAME	Android.mk	/^RECOVERY_NAME := ShenduOS中文恢复系统$/;"	m
RECOVERY_ROOTS_H_	roots.h	18;"	d
RECOVERY_SYMLINKS	Android.mk	/^RECOVERY_SYMLINKS := $(addprefix $(TARGET_RECOVERY_ROOT_OUT)\/sbin\/,$(RECOVERY_LINKS))$/;"	m
RECOVERY_VERSION	Android.mk	/^RECOVERY_VERSION := $(RECOVERY_NAME)$/;"	m
RESTORE	minadbd/adb.h	/^    RESTORE$/;"	e	enum:__anon14
RETOUCH_DATA_ERROR	minelf/Retouch.h	31;"	d
RETOUCH_DATA_MATCHED	minelf/Retouch.h	32;"	d
RETOUCH_DATA_MISMATCHED	minelf/Retouch.h	33;"	d
RETOUCH_DATA_NOTAPPLICABLE	minelf/Retouch.h	34;"	d
RETOUCH_DONT_MASK	minelf/Retouch.h	28;"	d
RETOUCH_DO_MASK	minelf/Retouch.h	29;"	d
RIGHT_ALIGN	ui.c	235;"	d	file:
Read2	applypatch/utils.c	/^int Read2(void* pv) {$/;"	f
Read4	applypatch/utils.c	/^int Read4(void* pv) {$/;"	f
Read8	applypatch/utils.c	/^long long Read8(void* pv) {$/;"	f
ReadArgs	edify/expr.c	/^int ReadArgs(State* state, Expr* argv[], int count, ...) {$/;"	f
ReadFileFn	updater/install.c	/^Value* ReadFileFn(const char* name, State* state, int argc, Expr* argv[]) {$/;"	f
ReadImage	applypatch/imgdiff.c	/^unsigned char* ReadImage(const char* filename,$/;"	f
ReadValueArgs	edify/expr.c	/^int ReadValueArgs(State* state, Expr* argv[], int count, ...) {$/;"	f
ReadValueVarArgs	edify/expr.c	/^Value** ReadValueVarArgs(State* state, int argc, Expr* argv[]) {$/;"	f
ReadVarArgs	edify/expr.c	/^char** ReadVarArgs(State* state, int argc, Expr* argv[]) {$/;"	f
ReadZip	applypatch/imgdiff.c	/^unsigned char* ReadZip(const char* filename,$/;"	f
ReconstructDeflateChunk	applypatch/imgdiff.c	/^int ReconstructDeflateChunk(ImageChunk* chunk) {$/;"	f
RegisterBuiltins	edify/expr.c	/^void RegisterBuiltins() {$/;"	f
RegisterFunction	edify/expr.c	/^void RegisterFunction(const char* name, Function fn) {$/;"	f
RegisterInstallFunctions	updater/install.c	/^void RegisterInstallFunctions() {$/;"	f
RegisterRecoveryHooks	edifyscripting.c	/^void RegisterRecoveryHooks() {$/;"	f
ReleaseBlockMapping	mtdutils/bml_over_mtd.c	/^static void ReleaseBlockMapping(const unsigned short* blockMapping)$/;"	f	file:
RestoreFn	edifyscripting.c	/^Value* RestoreFn(const char* name, State* state, int argc, Expr* argv[]) {$/;"	f
RunProgramFn	edifyscripting.c	/^Value* RunProgramFn(const char* name, State* state, int argc, Expr* argv[]) {$/;"	f
RunProgramFn	updater/install.c	/^Value* RunProgramFn(const char* name, State* state, int argc, Expr* argv[]) {$/;"	f
SAFE_SPRINTF	minadbd/fdevent.c	334;"	d	file:
SCRIPT_NAME	updater/updater.c	33;"	d	file:
SDCARD_PACKAGE_FILE	recovery.c	/^static const char *SDCARD_PACKAGE_FILE = "\/sdcard\/update.zip";$/;"	v	file:
SDCARD_ROOT	recovery.c	/^static const char *SDCARD_ROOT = "\/sdcard";$/;"	v	file:
SDCARD_UPDATE_FILE	extendedcommands.c	/^static const char *SDCARD_UPDATE_FILE = "\/sdcard\/update.zip";$/;"	v	file:
SELECT_ITEM	recovery_ui.h	72;"	d
SHELL_EXIT_NOTIFY_FD	minadbd/fdevent.c	/^int SHELL_EXIT_NOTIFY_FD = -1;$/;"	v
SIDELOAD_TEMP_DIR	recovery.c	/^static const char *SIDELOAD_TEMP_DIR = "\/tmp\/sideload";$/;"	v	file:
SORT_ENTRIES	minzip/Zip.c	26;"	d	file:
SPARE_SIZE	mtdutils/bml_over_mtd.c	132;"	d	file:
SPARE_SIZE	mtdutils/mtdutils.c	574;"	d	file:
STORED	minzip/Zip.c	/^    STORED = 0,$/;"	e	enum:__anon39	file:
STRINGIFY	common.h	108;"	d
S_ISLNK	minadbd/sysdeps.h	87;"	d
SaveFileContents	applypatch/applypatch.c	/^int SaveFileContents(const char* filename, const FileContents* file) {$/;"	f
SequenceFn	edify/expr.c	/^Value* SequenceFn(const char* name, State* state, int argc, Expr* argv[]) {$/;"	f
SetPermFn	updater/install.c	/^Value* SetPermFn(const char* name, State* state, int argc, Expr* argv[]) {$/;"	f
SetProgressFn	updater/install.c	/^Value* SetProgressFn(const char* name, State* state, int argc, Expr* argv[]) {$/;"	f
Sha1CheckFn	updater/install.c	/^Value* Sha1CheckFn(const char* name, State* state, int argc, Expr* argv[]) {$/;"	f
ShowActions	utilities/sdparted	/^ShowActions() {$/;"	f
ShowBSDiffLicense	applypatch/bspatch.c	/^void ShowBSDiffLicense() {$/;"	f
ShowCardInfo	utilities/sdparted	/^ShowCardInfo() {$/;"	f
ShowError	utilities/sdparted	/^ShowError() { echo ; echo " err: $1" ; echo ; exit 1 ; }$/;"	f
ShowHelp	utilities/sdparted	/^ShowHelp() {$/;"	f
ShowLicenses	applypatch/applypatch.c	/^int ShowLicenses() {$/;"	f
ShowMessage	utilities/sdparted	/^ShowMessage() { echo ; echo " msg: $1" ; }$/;"	f
ShowProgressFn	updater/install.c	/^Value* ShowProgressFn(const char* name, State* state, int argc, Expr* argv[]) {$/;"	f
SinkFn	applypatch/applypatch.h	/^typedef ssize_t (*SinkFn)(unsigned char*, ssize_t, void*);$/;"	t
SleepFn	edify/expr.c	/^Value* SleepFn(const char* name, State* state, int argc, Expr* argv[]) {$/;"	f
SpaceMode	applypatch/main.c	/^int SpaceMode(int argc, char** argv) {$/;"	f
State	edify/expr.h	/^} State;$/;"	t	typeref:struct:__anon7
StdoutFn	edify/expr.c	/^Value* StdoutFn(const char* name, State* state, int argc, Expr* argv[]) {$/;"	f
StringValue	edify/expr.c	/^Value* StringValue(char* str) {$/;"	f
SubstringFn	edify/expr.c	/^Value* SubstringFn(const char* name, State* state,$/;"	f
SymlinkFn	updater/install.c	/^Value* SymlinkFn(const char* name, State* state, int argc, Expr* argv[]) {$/;"	f
TABLE_ENTRY_0	mmcutils/mmcutils.h	35;"	d
TABLE_ENTRY_1	mmcutils/mmcutils.h	36;"	d
TABLE_ENTRY_2	mmcutils/mmcutils.h	37;"	d
TABLE_ENTRY_3	mmcutils/mmcutils.h	38;"	d
TABLE_ENTRY_SIZE	mmcutils/mmcutils.h	40;"	d
TABLE_SIGNATURE	mmcutils/mmcutils.h	39;"	d
TARGET_ARCH	flashutils/Android.mk	/^endif	# TARGET_ARCH == arm$/;"	m
TARGET_ARCH	mmcutils/Android.mk	/^endif	# TARGET_ARCH == arm$/;"	m
TEMPORARY_LOG_FILE	recovery.c	/^static const char *TEMPORARY_LOG_FILE = "\/tmp\/recovery.log";$/;"	v	file:
TRACE_ADB	minadbd/adb.h	/^    TRACE_ADB = 0,   \/* 0x001 *\/$/;"	e	enum:__anon15
TRACE_JDWP	minadbd/adb.h	/^    TRACE_JDWP,      \/* 0x100 *\/$/;"	e	enum:__anon15
TRACE_PACKETS	minadbd/adb.h	/^    TRACE_PACKETS,$/;"	e	enum:__anon15
TRACE_RWX	minadbd/adb.h	/^    TRACE_RWX,       \/* 0x010 *\/$/;"	e	enum:__anon15
TRACE_SERVICES	minadbd/adb.h	/^    TRACE_SERVICES,$/;"	e	enum:__anon15
TRACE_SOCKETS	minadbd/adb.h	/^    TRACE_SOCKETS,$/;"	e	enum:__anon15
TRACE_SYNC	minadbd/adb.h	/^    TRACE_SYNC,$/;"	e	enum:__anon15
TRACE_SYSDEPS	minadbd/adb.h	/^    TRACE_SYSDEPS,$/;"	e	enum:__anon15
TRACE_TAG	minadbd/adb.c	17;"	d	file:
TRACE_TAG	minadbd/services.c	26;"	d	file:
TRACE_TAG	minadbd/sockets.c	26;"	d	file:
TRACE_TAG	minadbd/transport.c	25;"	d	file:
TRACE_TAG	minadbd/transport.c	729;"	d	file:
TRACE_TAG	minadbd/transport.c	730;"	d	file:
TRACE_TAG	minadbd/transport_usb.c	23;"	d	file:
TRACE_TAG	minadbd/usb_linux_client.c	29;"	d	file:
TRACE_TRANSPORT	minadbd/adb.h	/^    TRACE_TRANSPORT,$/;"	e	enum:__anon15
TRACE_USB	minadbd/adb.h	/^    TRACE_USB,$/;"	e	enum:__anon15
TUNE2FS_BIN	extendedcommands.c	615;"	d	file:
TUNE2FS_BIN	mmcutils/mmcutils.c	320;"	d	file:
TryReconstruction	applypatch/imgdiff.c	/^int TryReconstruction(ImageChunk* chunk, unsigned char* out) {$/;"	f
UIParameters	common.h	/^} UIParameters;$/;"	t	typeref:struct:__anon6
UIPrintFn	edifyscripting.c	/^Value* UIPrintFn(const char* name, State* state, int argc, Expr* argv[]) {$/;"	f
UIPrintFn	updater/install.c	/^Value* UIPrintFn(const char* name, State* state, int argc, Expr* argv[]) {$/;"	f
UI_KEY_REPEAT_INTERVAL	ui.c	59;"	d	file:
UI_KEY_WAIT_REPEAT	ui.c	60;"	d	file:
UI_WAIT_KEY_TIMEOUT_SEC	ui.c	58;"	d	file:
UNKNOWN	flashutils/flashutils.h	/^    UNKNOWN = 0,$/;"	e	enum:flash_type
UNSUPPORTED	flashutils/flashutils.h	/^    UNSUPPORTED = -1,$/;"	e	enum:flash_type
UNZIP_DIRMODE	minzip/Zip.c	1044;"	d	file:
UNZIP_FILEMODE	minzip/Zip.c	1045;"	d	file:
UPDATE_MAGIC	bootloader.c	335;"	d	file:
UPDATE_MAGIC_SIZE	bootloader.c	336;"	d	file:
UPDATE_VERSION	bootloader.c	337;"	d	file:
UnmountAll	utilities/sdparted	/^UnmountAll () {$/;"	f
UnmountFn	updater/install.c	/^Value* UnmountFn(const char* name, State* state, int argc, Expr* argv[]) {$/;"	f
UnterminatedString	minzip/Zip.h	/^} UnterminatedString;$/;"	t	typeref:struct:__anon43
UpdaterInfo	updater/updater.h	/^} UpdaterInfo;$/;"	t	typeref:struct:__anon51
UpgradeDowngradeOnly	utilities/sdparted	/^UpgradeDowngradeOnly() {$/;"	f
UpgradeExt	utilities/sdparted	/^UpgradeExt() {$/;"	f
UserAbort	utilities/sdparted	/^UserAbort() {$/;"	f
VAL_BLOB	edify/expr.h	49;"	d
VAL_STRING	edify/expr.h	48;"	d
VERIFICATION_PROGRESS_FRACTION	common.h	/^static const float VERIFICATION_PROGRESS_FRACTION = 0.25;$/;"	v
VERIFICATION_PROGRESS_TIME	common.h	/^static const int VERIFICATION_PROGRESS_TIME = 60;$/;"	v
VERIFY_FAILURE	verifier.h	28;"	d
VERIFY_SUCCESS	verifier.h	27;"	d
ValidateExtArg	utilities/sdparted	/^ValidateExtArg() {$/;"	f
ValidateSizeArg	utilities/sdparted	/^ValidateSizeArg() {$/;"	f
Value	edify/expr.h	/^} Value;$/;"	t	typeref:struct:__anon8
Volume	common.h	/^} Volume;$/;"	t	typeref:struct:__anon5
WipeCacheFn	updater/install.c	/^Value* WipeCacheFn(const char* name, State* state, int argc, Expr* argv[]) {$/;"	f
Write4	applypatch/utils.c	/^void Write4(int value, FILE* f) {$/;"	f
Write8	applypatch/utils.c	/^void Write8(long long value, FILE* f) {$/;"	f
WriteRawImageFn	updater/install.c	/^Value* WriteRawImageFn(const char* name, State* state, int argc, Expr* argv[]) {$/;"	f
WriteToPartition	applypatch/applypatch.c	/^int WriteToPartition(unsigned char* data, size_t len,$/;"	f
YYLLOC_DEFAULT	edify/yydefs.h	25;"	d
YYLTYPE	edify/yydefs.h	/^} YYLTYPE;$/;"	t	typeref:struct:__anon10
YYLTYPE	edify/yydefs.h	20;"	d
ZipArchive	minzip/Zip.h	/^typedef struct ZipArchive {$/;"	s
ZipArchive	minzip/Zip.h	/^} ZipArchive;$/;"	t	typeref:struct:ZipArchive
ZipEntry	minzip/Zip.h	/^typedef struct ZipEntry {$/;"	s
ZipEntry	minzip/Zip.h	/^} ZipEntry;$/;"	t	typeref:struct:ZipEntry
ZipFileEntry	applypatch/imgdiff.c	/^} ZipFileEntry;$/;"	t	typeref:struct:__anon3	file:
_ADB_SYSDEPS_H	minadbd/sysdeps.h	21;"	d
_ADB_UTILS_H	minadbd/utils.h	17;"	d
_APPLYPATCH_H	applypatch/applypatch.h	18;"	d
_BUILD_TOOLS_APPLYPATCH_UTILS_H	applypatch/utils.h	18;"	d
_EXPRESSION_H	edify/expr.h	18;"	d
_FileContents	applypatch/applypatch.h	/^typedef struct _FileContents {$/;"	s
_MINELF_RETOUCH	minelf/Retouch.h	18;"	d
_MINUI_H_	minui/minui.h	18;"	d
_MINZIP_BITS	minzip/Bits.h	7;"	d
_MINZIP_HASH	minzip/Hash.h	10;"	d
_MINZIP_LOG_H	minzip/Log.h	15;"	d
_MINZIP_SYSUTIL	minzip/SysUtil.h	7;"	d
_MINZIP_ZIP	minzip/Zip.h	7;"	d
_PATH_BSHELL	libcrecovery/defines.h	1;"	d
_PATH_BSHELL	libcrecovery/defines.h	2;"	d
_Patch	applypatch/applypatch.h	/^typedef struct _Patch {$/;"	s
_RECOVERY_BOOTLOADER_H	bootloader.h	18;"	d
_RECOVERY_FIRMWARE_H	firmware.h	18;"	d
_RECOVERY_UI_H	recovery_ui.h	18;"	d
_RECOVERY_VERIFIER_H	verifier.h	18;"	d
_UPDATER_INSTALL_H_	updater/install.h	18;"	d
_UPDATER_UPDATER_H_	updater/updater.h	18;"	d
_WIN32	minadbd/sysdeps.h	24;"	d
_YYDEFS_H_	edify/yydefs.h	18;"	d
__ADB_H	minadbd/adb.h	18;"	d
__FDEVENT_H	minadbd/fdevent.h	18;"	d
__TRANSPORT_H	minadbd/transport.h	18;"	d
__pclose	libcrecovery/popen.c	/^__pclose(FILE *iop)$/;"	f
__popen	libcrecovery/popen.c	/^__popen(const char *program, const char *type)$/;"	f
__system	libcrecovery/system.c	/^__system(const char *command)$/;"	f
accept	minadbd/sysdeps.h	215;"	d
accept	minadbd/sysdeps.h	216;"	d
accept	minadbd/sysdeps.h	406;"	d
accept	minadbd/sysdeps.h	407;"	d
acquire_one_transport	minadbd/transport.c	/^atransport *acquire_one_transport(int state, transport_type ttype, const char* serial, char** error_out)$/;"	f
action	minadbd/transport.c	/^    int         action;$/;"	m	struct:tmsg	file:
adb_cleanup	minadbd/adb.c	/^static void adb_cleanup(void)$/;"	f	file:
adb_close	minadbd/sysdeps.h	/^static __inline__ int  adb_close(int fd)$/;"	f
adb_cond_broadcast	minadbd/sysdeps.h	292;"	d
adb_cond_destroy	minadbd/sysdeps.h	294;"	d
adb_cond_init	minadbd/sysdeps.h	290;"	d
adb_cond_signal	minadbd/sysdeps.h	293;"	d
adb_cond_t	minadbd/sysdeps.h	289;"	d
adb_cond_wait	minadbd/sysdeps.h	291;"	d
adb_creat	minadbd/sysdeps.h	/^static __inline__  int  adb_creat(const char*  path, int  mode)$/;"	f
adb_device_banner	minadbd/adb.c	/^static const char *adb_device_banner = "sideload";$/;"	v	file:
adb_dirstart	minadbd/sysdeps.h	/^static __inline__  char*  adb_dirstart( const char*  path )$/;"	f
adb_dirstart	minadbd/sysdeps.h	/^static __inline__ char*  adb_dirstart(const char*  path)$/;"	f
adb_dirstop	minadbd/sysdeps.h	/^static __inline__  char*  adb_dirstop( const char*  path )$/;"	f
adb_dirstop	minadbd/sysdeps.h	/^static __inline__ char*  adb_dirstop(const char*  path)$/;"	f
adb_is_absolute_host_path	minadbd/sysdeps.h	/^static __inline__  int  adb_is_absolute_host_path( const char*  path )$/;"	f
adb_lseek	minadbd/sysdeps.h	/^static __inline__ int   adb_lseek(int  fd, int  pos, int  where)$/;"	f
adb_main	minadbd/adb.c	/^int adb_main()$/;"	f
adb_mkdir	minadbd/sysdeps.h	/^static __inline__ int  adb_mkdir(const char*  path, int mode)$/;"	f
adb_mutex_destroy	minadbd/sysdeps.h	285;"	d
adb_mutex_init	minadbd/sysdeps.h	282;"	d
adb_mutex_lock	minadbd/sysdeps.h	/^static __inline__ void adb_mutex_lock( adb_mutex_t*  lock )$/;"	f
adb_mutex_lock	minadbd/sysdeps.h	283;"	d
adb_mutex_t	minadbd/sysdeps.h	/^typedef  pthread_mutex_t          adb_mutex_t;$/;"	t
adb_mutex_t	minadbd/sysdeps.h	/^typedef CRITICAL_SECTION          adb_mutex_t;$/;"	t
adb_mutex_unlock	minadbd/sysdeps.h	/^static __inline__ void  adb_mutex_unlock( adb_mutex_t*  lock )$/;"	f
adb_mutex_unlock	minadbd/sysdeps.h	284;"	d
adb_open	minadbd/sysdeps.h	/^static __inline__ int  adb_open( const char*  pathname, int  options )$/;"	f
adb_open_mode	minadbd/sysdeps.h	/^static __inline__ int  adb_open_mode( const char*  pathname, int  options, int  mode )$/;"	f
adb_open_mode	minadbd/sysdeps.h	/^static __inline__ int  adb_open_mode(const char* path, int options, int mode)$/;"	f
adb_port	minadbd/adb.h	/^    int adb_port; \/\/ Use for emulators (local transport)$/;"	m	struct:atransport
adb_read	minadbd/sysdeps.h	/^static __inline__  int  adb_read(int  fd, void*  buf, size_t  len)$/;"	f
adb_shutdown	minadbd/sysdeps.h	/^static __inline__ int  adb_shutdown(int fd)$/;"	f
adb_sleep_ms	minadbd/sysdeps.h	/^static __inline__ void  adb_sleep_ms( int  mseconds )$/;"	f
adb_socket_accept	minadbd/sysdeps.h	/^static __inline__ int  adb_socket_accept(int  serverfd, struct sockaddr*  addr, socklen_t  *addrlen)$/;"	f
adb_socket_setbufsize	minadbd/sysdeps.h	/^static __inline__  int  adb_socket_setbufsize( int   fd, int  bufsize )$/;"	f
adb_socketpair	minadbd/sysdeps.h	/^static __inline__ int  adb_socketpair( int  sv[2] )$/;"	f
adb_sysdeps_init	minadbd/sysdeps.h	/^static __inline__ void  adb_sysdeps_init(void)$/;"	f
adb_thread_create	minadbd/sysdeps.h	/^static __inline__ int  adb_thread_create( adb_thread_t  *pthread, adb_thread_func_t  start, void*  arg )$/;"	f
adb_thread_create	minadbd/sysdeps.h	/^static __inline__ int  adb_thread_create( adb_thread_t  *thread, adb_thread_func_t  func, void*  arg)$/;"	f
adb_thread_func_t	minadbd/sysdeps.h	/^typedef  void*  (*adb_thread_func_t)(void*  arg);$/;"	t
adb_thread_func_t	minadbd/sysdeps.h	/^typedef void*  (*adb_thread_func_t)( void*  arg );$/;"	t
adb_thread_t	minadbd/sysdeps.h	/^typedef  pthread_t                 adb_thread_t;$/;"	t
adb_thread_t	minadbd/sysdeps.h	/^typedef struct { unsigned  tid; }  adb_thread_t;$/;"	t	typeref:struct:__anon16
adb_trace_init	minadbd/adb.c	/^void  adb_trace_init(void)$/;"	f
adb_trace_mask	minadbd/adb.c	/^int   adb_trace_mask;$/;"	v
adb_unlink	minadbd/sysdeps.h	/^static __inline__  int    adb_unlink(const char*  path)$/;"	f
adb_write	minadbd/sysdeps.h	/^static __inline__  int  adb_write(int  fd, const void*  buf, size_t  len)$/;"	f
addEntryToHashTable	minzip/Zip.c	/^static void addEntryToHashTable(HashTable* pHash, ZipEntry* pEntry)$/;"	f	file:
add_bad_block_offset	mtdutils/mtdutils.c	/^static void add_bad_block_offset(MtdWriteContext *ctx, off_t pos) {$/;"	f	file:
add_transport_disconnect	minadbd/transport.c	/^void add_transport_disconnect(atransport*  t, adisconnect*  dis)$/;"	f
addr	minzip/SysUtil.h	/^    void*   addr;           \/* start of data *\/$/;"	m	struct:MemMapping
adisconnect	minadbd/adb.h	/^struct  adisconnect$/;"	s
adisconnect	minadbd/adb.h	/^typedef struct adisconnect  adisconnect;$/;"	t	typeref:struct:adisconnect
allow_display_toggle	recovery.c	/^static int allow_display_toggle = 0;$/;"	v	file:
amessage	minadbd/adb.h	/^struct amessage {$/;"	s
amessage	minadbd/adb.h	/^typedef struct amessage amessage;$/;"	t	typeref:struct:amessage
apacket	minadbd/adb.h	/^struct apacket$/;"	s
apacket	minadbd/adb.h	/^typedef struct apacket apacket;$/;"	t	typeref:struct:apacket
apply_from_adb	adb_install.c	/^apply_from_adb() {$/;"	f
applypatch	applypatch/applypatch.c	/^int applypatch(const char* source_filename,$/;"	f
applypatch_check	applypatch/applypatch.c	/^int applypatch_check(const char* filename,$/;"	f
aremotesocket	minadbd/sockets.c	/^typedef struct aremotesocket {$/;"	s	file:
aremotesocket	minadbd/sockets.c	/^} aremotesocket;$/;"	t	typeref:struct:aremotesocket	file:
arg	minadbd/fdevent.h	/^    void *arg;$/;"	m	struct:fdevent
arg	minadbd/sysdeps.h	/^    void *arg;$/;"	m	struct:fdevent
arg0	minadbd/adb.h	/^    unsigned arg0;          \/* first argument                   *\/$/;"	m	struct:amessage
arg1	minadbd/adb.h	/^    unsigned arg1;          \/* second argument                  *\/$/;"	m	struct:amessage
argc	edify/expr.h	/^    int argc;$/;"	m	struct:Expr
arglist	edify/parser.y	/^arglist:    \/* empty *\/ {$/;"	l
argv	edify/expr.h	/^    Expr** argv;$/;"	m	struct:Expr
array	dedupe/dedupe.c	/^struct array {$/;"	s	file:
array_add	dedupe/dedupe.c	/^static void array_add(struct array* arr, void* val) {$/;"	f	file:
array_free	dedupe/dedupe.c	/^static void array_free(struct array* arr, int free_members) {$/;"	f	file:
array_init	dedupe/dedupe.c	/^static void array_init(struct array* arr, int capacity) {$/;"	f	file:
ascent	minui/graphics.c	/^    unsigned ascent;$/;"	m	struct:__anon20	file:
aservice	minadbd/adb.h	/^typedef struct aservice aservice;$/;"	t	typeref:struct:aservice
asocket	minadbd/adb.h	/^struct asocket {$/;"	s
asocket	minadbd/adb.h	/^typedef struct asocket asocket;$/;"	t	typeref:struct:asocket
atransport	minadbd/adb.h	/^struct atransport$/;"	s
atransport	minadbd/adb.h	/^typedef struct atransport atransport;$/;"	t	typeref:struct:atransport
b	make-overlay.py	/^      b = base.getpixel((i,j))$/;"	v
backup_raw_partition	flashutils/flashutils.c	/^int backup_raw_partition(const char* partitionType, const char *partition, const char *filename)$/;"	f
bad_block_alloc	mtdutils/bml_over_mtd.c	/^	int bad_block_alloc;$/;"	m	struct:BmlOverMtdWriteContext	file:
bad_block_alloc	mtdutils/mtdutils.c	/^    int bad_block_alloc;$/;"	m	struct:MtdWriteContext	file:
bad_block_count	mtdutils/bml_over_mtd.c	/^	int bad_block_count;$/;"	m	struct:BmlOverMtdWriteContext	file:
bad_block_count	mtdutils/mtdutils.c	/^    int bad_block_count;$/;"	m	struct:MtdWriteContext	file:
bad_block_offsets	mtdutils/bml_over_mtd.c	/^	off_t* bad_block_offsets;$/;"	m	struct:BmlOverMtdWriteContext	file:
bad_block_offsets	mtdutils/mtdutils.c	/^    off_t* bad_block_offsets;$/;"	m	struct:MtdWriteContext	file:
base	make-overlay.py	/^base = Image.open(sys.argv[1])$/;"	v
baseAddr	minzip/SysUtil.h	/^    void*   baseAddr;       \/* page-aligned base address *\/$/;"	m	struct:MemMapping
baseLength	minzip/SysUtil.h	/^    size_t  baseLength;     \/* length of mapping *\/$/;"	m	struct:MemMapping
bitmap_bpp	bootloader.c	/^    unsigned bitmap_bpp;$/;"	m	struct:update_header	file:
bitmap_height	bootloader.c	/^    unsigned bitmap_height;$/;"	m	struct:update_header	file:
bitmap_width	bootloader.c	/^    unsigned bitmap_width;$/;"	m	struct:update_header	file:
blob_dir	dedupe/dedupe.c	/^    char blob_dir[PATH_MAX];$/;"	m	struct:DEDUPE_STORE_CONTEXT	file:
blob_size	minelf/Retouch.h	/^  uint32_t blob_size; \/* in bytes, located right before this struct *\/$/;"	m	struct:__anon17
bml_check_volume	extendedcommands.c	/^int bml_check_volume(const char *path) {$/;"	f
bml_over_mtd_read_close	mtdutils/bml_over_mtd.c	/^static void bml_over_mtd_read_close(BmlOverMtdReadContext *ctx)$/;"	f	file:
bml_over_mtd_read_partition	mtdutils/bml_over_mtd.c	/^static BmlOverMtdReadContext *bml_over_mtd_read_partition(const MtdPartition *partition)$/;"	f	file:
bml_over_mtd_write_block	mtdutils/bml_over_mtd.c	/^static ssize_t bml_over_mtd_write_block(int fd, ssize_t erase_size, char* data)$/;"	f	file:
bml_over_mtd_write_close	mtdutils/bml_over_mtd.c	/^static int bml_over_mtd_write_close(BmlOverMtdWriteContext *ctx)$/;"	f	file:
bml_over_mtd_write_partition	mtdutils/bml_over_mtd.c	/^static BmlOverMtdWriteContext *bml_over_mtd_write_partition(const MtdPartition *partition)$/;"	f	file:
boardEnableKeyRepeat	ui.c	/^static int boardEnableKeyRepeat = 0;$/;"	v	file:
boardNumRepeatableKeys	ui.c	/^static int boardRepeatableKeys[64], boardNumRepeatableKeys = 0;$/;"	v	file:
boardRepeatableKeys	ui.c	/^static int boardRepeatableKeys[64], boardNumRepeatableKeys = 0;$/;"	v	file:
bootloader_message	bootloader.h	/^struct bootloader_message {$/;"	s
bsdiff	applypatch/bsdiff.c	/^int bsdiff(u_char* old, off_t oldsize, off_t** IP, u_char* new, off_t newsize,$/;"	f
buf	minzip/Zip.c	/^    char *buf;$/;"	m	struct:__anon40	file:
buf	minzip/Zip.c	/^    char *buf;$/;"	m	struct:__anon42	file:
bufLen	minzip/Zip.c	/^    int bufLen;$/;"	m	struct:__anon40	file:
bufLen	minzip/Zip.c	/^    int bufLen;$/;"	m	struct:__anon42	file:
buff_add	minadbd/utils.c	/^buff_add  (char*  buff, char*  buffEnd, const char*  format, ... )$/;"	f
buff_addb	minadbd/utils.c	/^buff_addb (char*  buff, char*  buffEnd, const void*  data, int  len)$/;"	f
buff_addc	minadbd/utils.c	/^buff_addc (char*  buff, char*  buffEnd, int  c)$/;"	f
buff_adds	minadbd/utils.c	/^buff_adds (char*  buff, char*  buffEnd, const char*  s)$/;"	f
buffer	applypatch/applypatch.c	/^    unsigned char* buffer;$/;"	m	struct:__anon1	file:
buffer	minzip/Zip.c	/^    unsigned char* buffer;$/;"	m	struct:__anon41	file:
buffer	mtdutils/bml_over_mtd.c	/^	char *buffer;$/;"	m	struct:BmlOverMtdReadContext	file:
buffer	mtdutils/bml_over_mtd.c	/^	char *buffer;$/;"	m	struct:BmlOverMtdWriteContext	file:
buffer	mtdutils/mtdutils.c	/^    char *buffer;$/;"	m	struct:MtdReadContext	file:
buffer	mtdutils/mtdutils.c	/^    char *buffer;$/;"	m	struct:MtdWriteContext	file:
bufferProcessFunction	minzip/Zip.c	/^static bool bufferProcessFunction(const unsigned char *data, int dataLen,$/;"	f	file:
busy_bitmap_length	bootloader.c	/^    unsigned busy_bitmap_length;$/;"	m	struct:update_header	file:
busy_bitmap_offset	bootloader.c	/^    unsigned busy_bitmap_offset;$/;"	m	struct:update_header	file:
can_partition	extendedcommands.c	/^int can_partition(const char* volume) {$/;"	f
capacity	dedupe/dedupe.c	/^    int capacity;$/;"	m	struct:array	file:
cb	minui/events.c	/^    ev_callback cb;$/;"	m	struct:fd_info	file:
check_and_fclose	recovery.c	/^check_and_fclose(FILE *fp, const char *name) {$/;"	f	file:
check_data	minadbd/transport.c	/^int check_data(apacket *p)$/;"	f
check_file	dedupe/dedupe.c	/^static int check_file(const char* f) {$/;"	f	file:
check_header	minadbd/transport.c	/^int check_header(apacket *p)$/;"	f
cheight	minui/courier_extended_15x24.h	/^  unsigned cheight;$/;"	m	struct:__anon27
cheight	minui/font_10x10.h	/^	unsigned cheight;$/;"	m	struct:__anon28
cheight	minui/font_10x18.h	/^  unsigned cheight;$/;"	m	struct:__anon23
cheight	minui/font_12x12.h	/^	unsigned cheight;$/;"	m	struct:__anon24
cheight	minui/font_14x14.h	/^	unsigned cheight;$/;"	m	struct:__anon33
cheight	minui/font_16x16.h	/^	unsigned cheight;$/;"	m	struct:__anon37
cheight	minui/font_18x18.h	/^	unsigned cheight;$/;"	m	struct:__anon19
cheight	minui/font_20x20.h	/^	unsigned cheight;$/;"	m	struct:__anon34
cheight	minui/font_24x24.h	/^	unsigned cheight;$/;"	m	struct:__anon36
cheight	minui/font_28x28.h	/^	unsigned cheight;$/;"	m	struct:__anon31
cheight	minui/font_32x32.h	/^	unsigned cheight;$/;"	m	struct:__anon25
cheight	minui/font_36x36.h	/^	unsigned cheight;$/;"	m	struct:__anon22
cheight	minui/font_40x40.h	/^	unsigned cheight;$/;"	m	struct:__anon21
cheight	minui/font_50x50.h	/^	unsigned cheight;$/;"	m	struct:__anon26
cheight	minui/font_60x60.h	/^	unsigned cheight;$/;"	m	struct:__anon35
cheight	minui/font_7x16.h	/^  unsigned cheight;$/;"	m	struct:__anon38
cheight	minui/graphics.c	/^    unsigned char *cheight;$/;"	m	struct:__anon20	file:
cheight	minui/roboto_10x18.h	/^  unsigned cheight;$/;"	m	struct:__anon29
cheight	minui/roboto_15x24.h	/^  unsigned cheight;$/;"	m	struct:__anon32
cheight	minui/roboto_23x41.h	/^  unsigned cheight;$/;"	m	struct:__anon30
choose_backup_format	extendedcommands.c	/^static void choose_backup_format() {$/;"	f	file:
choose_file_menu	extendedcommands.c	/^char* choose_file_menu(const char* directory, const char* fileExtensionOrDirectory, const char* headers[])$/;"	f
cleanup	applypatch/applypatch.sh	/^cleanup() {$/;"	f
cleanup	applypatch/imgdiff_test.sh	/^cleanup() {$/;"	f
cleanup	verifier_test.sh	/^cleanup() {$/;"	f
close	minadbd/adb.h	/^    void (*close)(asocket *s);$/;"	m	struct:asocket
close	minadbd/adb.h	/^    void (*close)(atransport *t);$/;"	m	struct:atransport
close	minadbd/sysdeps.h	124;"	d
close	minadbd/sysdeps.h	125;"	d
close	minadbd/sysdeps.h	362;"	d
close	minadbd/sysdeps.h	363;"	d
close_all_sockets	minadbd/sockets.c	/^void close_all_sockets(atransport *t)$/;"	f
close_on_exec	minadbd/sysdeps.h	/^static __inline__ void  close_on_exec(int  fd)$/;"	f
closing	minadbd/adb.h	/^    int    closing;$/;"	m	struct:asocket
cmask	minui/graphics.c	/^	int     cmask;$/;"	m	struct:utf8_table	file:
cmd_bml_backup_raw_partition	bmlutils/bmlutils.c	/^int cmd_bml_backup_raw_partition(const char *partition, const char *out_file)$/;"	f
cmd_bml_erase_partition	bmlutils/bmlutils.c	/^int cmd_bml_erase_partition(const char *partition, const char *filesystem)$/;"	f
cmd_bml_erase_raw_partition	bmlutils/bmlutils.c	/^int cmd_bml_erase_raw_partition(const char *partition)$/;"	f
cmd_bml_get_partition_device	bmlutils/bmlutils.c	/^int cmd_bml_get_partition_device(const char *partition, char *device)$/;"	f
cmd_bml_mount_partition	bmlutils/bmlutils.c	/^int cmd_bml_mount_partition(const char *partition, const char *mount_point, const char *filesystem, int read_only)$/;"	f
cmd_bml_restore_raw_partition	bmlutils/bmlutils.c	/^int cmd_bml_restore_raw_partition(const char *partition, const char *filename)$/;"	f
cmd_mmc_backup_raw_partition	mmcutils/mmcutils.c	/^int cmd_mmc_backup_raw_partition(const char *partition, const char *filename)$/;"	f
cmd_mmc_erase_partition	mmcutils/mmcutils.c	/^int cmd_mmc_erase_partition(const char *partition, const char *filesystem)$/;"	f
cmd_mmc_erase_raw_partition	mmcutils/mmcutils.c	/^int cmd_mmc_erase_raw_partition(const char *partition)$/;"	f
cmd_mmc_get_partition_device	mmcutils/mmcutils.c	/^int cmd_mmc_get_partition_device(const char *partition, char *device)$/;"	f
cmd_mmc_mount_partition	mmcutils/mmcutils.c	/^int cmd_mmc_mount_partition(const char *partition, const char *mount_point, const char *filesystem, int read_only)$/;"	f
cmd_mmc_restore_raw_partition	mmcutils/mmcutils.c	/^int cmd_mmc_restore_raw_partition(const char *partition, const char *filename)$/;"	f
cmd_mtd_backup_raw_partition	mtdutils/mtdutils.c	/^int cmd_mtd_backup_raw_partition(const char *partition_name, const char *filename)$/;"	f
cmd_mtd_erase_partition	mtdutils/mtdutils.c	/^int cmd_mtd_erase_partition(const char *partition, const char *filesystem)$/;"	f
cmd_mtd_erase_raw_partition	mtdutils/mtdutils.c	/^int cmd_mtd_erase_raw_partition(const char *partition_name)$/;"	f
cmd_mtd_get_partition_device	mtdutils/mtdutils.c	/^int cmd_mtd_get_partition_device(const char *partition, char *device)$/;"	f
cmd_mtd_mount_partition	mtdutils/mtdutils.c	/^int cmd_mtd_mount_partition(const char *partition, const char *mount_point, const char *filesystem, int read_only)$/;"	f
cmd_mtd_restore_raw_partition	mtdutils/mtdutils.c	/^int cmd_mtd_restore_raw_partition(const char *partition_name, const char *filename)$/;"	f
cmd_pipe	updater/updater.h	/^    FILE* cmd_pipe;$/;"	m	struct:__anon51
command	bootloader.h	/^	char command[32];$/;"	m	struct:dual_boot_message
command	bootloader.h	/^    char command[32];$/;"	m	struct:bootloader_message
command	minadbd/adb.h	/^    unsigned command;       \/* command identifier constant      *\/$/;"	m	struct:amessage
commands_recovery_local_path	Android.mk	/^commands_recovery_local_path := $(LOCAL_PATH)$/;"	m
commands_recovery_local_path	Android.mk	/^commands_recovery_local_path :=$/;"	m
compLen	minzip/Zip.h	/^    long         compLen;$/;"	m	struct:ZipEntry
compare_size_indices	applypatch/applypatch.c	/^static int compare_size_indices(const void* a, const void* b) {$/;"	f	file:
compare_string	recovery.c	/^static int compare_string(const void* a, const void* b) {$/;"	f	file:
compression	minzip/Zip.h	/^    int          compression;$/;"	m	struct:ZipEntry
computeHash	minzip/Zip.c	/^static unsigned int computeHash(const char* name, int nameLen)$/;"	f	file:
compute_directory_stats	nandroid.c	/^static void compute_directory_stats(const char* directory)$/;"	f	file:
confirm_selection	extendedcommands.c	/^int confirm_selection(const char* title, const char* confirm)$/;"	f
connect_to_remote	minadbd/sockets.c	/^void connect_to_remote(asocket *s, const char *destination)$/;"	f
connect_to_smartsocket	minadbd/sockets.c	/^void connect_to_smartsocket(asocket *s)$/;"	f
connection_state	minadbd/adb.h	/^    int connection_state;$/;"	m	struct:atransport
consumed	mtdutils/bml_over_mtd.c	/^	size_t consumed;$/;"	m	struct:BmlOverMtdReadContext	file:
consumed	mtdutils/mtdutils.c	/^    size_t consumed;$/;"	m	struct:MtdReadContext	file:
cont_prev	minelf/Retouch.c	/^static uint32_t cont_prev;$/;"	v	file:
control_usb_storage	extendedcommands.c	/^int control_usb_storage(Volume **volumes, bool enable) {$/;"	f
control_usb_storage_for_lun	extendedcommands.c	/^int control_usb_storage_for_lun(Volume* vol, bool enable) {$/;"	f
control_usb_storage_set_lun	extendedcommands.c	/^int control_usb_storage_set_lun(Volume* vol, bool enable, const char *lun_file) {$/;"	f
cookie	edify/expr.h	/^    void* cookie;$/;"	m	struct:__anon7
cookie	minadbd/services.c	/^    void *cookie;$/;"	m	struct:stinfo	file:
copyProcessFunction	minzip/Zip.c	/^static bool copyProcessFunction(const unsigned char *data, int dataLen,$/;"	f	file:
copy_file	dedupe/dedupe.c	/^static int copy_file(const char *src, const char *dst) {$/;"	f	file:
copy_log_file	recovery.c	/^copy_log_file(const char* destination, int append) {$/;"	f	file:
copy_sideloaded_package	recovery.c	/^copy_sideloaded_package(const char* original_path) {$/;"	f	file:
count	minui/font_10x10.h	/^	unsigned count;$/;"	m	struct:__anon28
count	minui/font_12x12.h	/^	unsigned count;$/;"	m	struct:__anon24
count	minui/font_14x14.h	/^	unsigned count;$/;"	m	struct:__anon33
count	minui/font_16x16.h	/^	unsigned count;$/;"	m	struct:__anon37
count	minui/font_18x18.h	/^	unsigned count;$/;"	m	struct:__anon19
count	minui/font_20x20.h	/^	unsigned count;$/;"	m	struct:__anon34
count	minui/font_24x24.h	/^	unsigned count;$/;"	m	struct:__anon36
count	minui/font_28x28.h	/^	unsigned count;$/;"	m	struct:__anon31
count	minui/font_32x32.h	/^	unsigned count;$/;"	m	struct:__anon25
count	minui/font_36x36.h	/^	unsigned count;$/;"	m	struct:__anon22
count	minui/font_40x40.h	/^	unsigned count;$/;"	m	struct:__anon21
count	minui/font_50x50.h	/^	unsigned count;$/;"	m	struct:__anon26
count	minui/font_60x60.h	/^	unsigned count;$/;"	m	struct:__anon35
count	minui/graphics.c	/^    unsigned count;$/;"	m	struct:__anon20	file:
countProbes	minzip/Hash.c	/^int countProbes(HashTable* pHashTable, unsigned int itemHash, const void* item,$/;"	f
countTombStones	minzip/Hash.c	/^static int countTombStones(HashTable* pHashTable)$/;"	f	file:
crc32	minzip/Zip.h	/^    long         crc32;$/;"	m	struct:ZipEntry
crcProcessFunction	minzip/Zip.c	/^static bool crcProcessFunction(const unsigned char *data, int dataLen,$/;"	f	file:
creat	minadbd/sysdeps.h	337;"	d
creat	minadbd/sysdeps.h	338;"	d
create_fstab	extendedcommands.c	/^void create_fstab()$/;"	f
create_local_service_socket	minadbd/sockets.c	/^asocket *create_local_service_socket(const char *name)$/;"	f
create_local_socket	minadbd/sockets.c	/^asocket *create_local_socket(int fd)$/;"	f
create_remote_socket	minadbd/sockets.c	/^asocket *create_remote_socket(unsigned id, atransport *t)$/;"	f
create_service_thread	minadbd/services.c	/^static int create_service_thread(void (*func)(int, void *), void *cookie)$/;"	f	file:
create_smart_socket	minadbd/sockets.c	/^asocket *create_smart_socket(void (*action_cb)(asocket *s, const char *act))$/;"	f
cval	minui/graphics.c	/^	int     cval;$/;"	m	struct:utf8_table	file:
cwidth	minui/courier_extended_15x24.h	/^  unsigned cwidth;$/;"	m	struct:__anon27
cwidth	minui/font_10x10.h	/^	unsigned cwidth;$/;"	m	struct:__anon28
cwidth	minui/font_10x18.h	/^  unsigned cwidth;$/;"	m	struct:__anon23
cwidth	minui/font_12x12.h	/^	unsigned cwidth;$/;"	m	struct:__anon24
cwidth	minui/font_14x14.h	/^	unsigned cwidth;$/;"	m	struct:__anon33
cwidth	minui/font_16x16.h	/^	unsigned cwidth;$/;"	m	struct:__anon37
cwidth	minui/font_18x18.h	/^	unsigned cwidth;$/;"	m	struct:__anon19
cwidth	minui/font_20x20.h	/^	unsigned cwidth;$/;"	m	struct:__anon34
cwidth	minui/font_24x24.h	/^	unsigned cwidth;$/;"	m	struct:__anon36
cwidth	minui/font_28x28.h	/^	unsigned cwidth;$/;"	m	struct:__anon31
cwidth	minui/font_32x32.h	/^	unsigned cwidth;$/;"	m	struct:__anon25
cwidth	minui/font_36x36.h	/^	unsigned cwidth;$/;"	m	struct:__anon22
cwidth	minui/font_40x40.h	/^	unsigned cwidth;$/;"	m	struct:__anon21
cwidth	minui/font_50x50.h	/^	unsigned cwidth;$/;"	m	struct:__anon26
cwidth	minui/font_60x60.h	/^	unsigned cwidth;$/;"	m	struct:__anon35
cwidth	minui/font_7x16.h	/^  unsigned cwidth;$/;"	m	struct:__anon38
cwidth	minui/graphics.c	/^    unsigned char *cwidth;$/;"	m	struct:__anon20	file:
cwidth	minui/roboto_10x18.h	/^  unsigned cwidth;$/;"	m	struct:__anon29
cwidth	minui/roboto_15x24.h	/^  unsigned cwidth;$/;"	m	struct:__anon32
cwidth	minui/roboto_23x41.h	/^  unsigned cwidth;$/;"	m	struct:__anon30
data	applypatch/applypatch.h	/^  unsigned char* data;$/;"	m	struct:_FileContents
data	applypatch/imgdiff.c	/^  unsigned char* data;  \/\/ data to be patched (uncompressed, for deflate chunks)$/;"	m	struct:__anon2	file:
data	dedupe/dedupe.c	/^    void** data;$/;"	m	struct:array	file:
data	edify/expr.h	/^    char* data;$/;"	m	struct:__anon8
data	minadbd/adb.h	/^    unsigned char data[MAX_PAYLOAD];$/;"	m	struct:apacket
data	minui/events.c	/^    void *data;$/;"	m	struct:fd_info	file:
data	minzip/Hash.h	/^    void*       data;$/;"	m	struct:HashIter
data	minzip/Hash.h	/^    void* data;$/;"	m	struct:HashEntry
data	tools/ota/convert-to-bmp.py	/^  data = im.tostring()$/;"	v
data_check	minadbd/adb.h	/^    unsigned data_check;    \/* checksum of data payload         *\/$/;"	m	struct:amessage
data_length	minadbd/adb.h	/^    unsigned data_length;   \/* length of payload (0 is allowed) *\/$/;"	m	struct:amessage
data_offset	applypatch/imgdiff.c	/^  int data_offset;$/;"	m	struct:__anon3	file:
date_diff	utilities/fix_permissions	/^date_diff()$/;"	f
dec_to_oct	dedupe/dedupe.c	/^static int dec_to_oct(int dec) {$/;"	f	file:
decode_bytes	minelf/Retouch.c	/^static void decode_bytes(uint8_t *encoded_bytes, int encoded_size,$/;"	f	file:
decode_in_memory	minelf/Retouch.c	/^static uint8_t *decode_in_memory(uint8_t *encoded_bytes,$/;"	f	file:
dedupe_compress_wrapper	nandroid.c	/^static int dedupe_compress_wrapper(const char* backup_path, const char* backup_file_image, int callback) {$/;"	f	file:
dedupe_extract_wrapper	nandroid.c	/^static int dedupe_extract_wrapper(const char* backup_file_image, const char* backup_path, int callback) {$/;"	f	file:
dedupe_main	dedupe/dedupe.c	/^int dedupe_main(int argc, char** argv) {$/;"	f
default_backup_handler	nandroid.c	/^static nandroid_backup_handler default_backup_handler = dedupe_compress_wrapper;$/;"	v	file:
deflate_data	applypatch/imgdiff.c	/^  unsigned char* deflate_data;$/;"	m	struct:__anon2	file:
deflate_len	applypatch/imgdiff.c	/^  int deflate_len;$/;"	m	struct:__anon3	file:
deflate_len	applypatch/imgdiff.c	/^  size_t deflate_len;$/;"	m	struct:__anon2	file:
delta_milliseconds	ui.c	/^static long delta_milliseconds(struct timeval from, struct timeval to) {$/;"	f	file:
detect_partition	flashutils/flashutils.c	/^static int detect_partition(const char *partitionType, const char *partition)$/;"	f	file:
device	common.h	/^    const char* device;       \/\/ MTD partition name if fs_type == "yaffs"$/;"	m	struct:__anon5
device	mounts.h	/^ const char *device;$/;"	m	struct:__anon48
device2	common.h	/^    const char* device2;      \/\/ alternative device to try if fs_type$/;"	m	struct:__anon5
device_flash_type	flashutils/flashutils.c	/^int device_flash_type()$/;"	f
device_handle_key	default_recovery_keys.c	/^int device_handle_key(int key_code, int visible) {$/;"	f
device_index	mmcutils/mmcutils.c	/^    char *device_index;$/;"	m	struct:MmcPartition	file:
device_index	mtdutils/mtdutils.h	/^    int device_index;$/;"	m	struct:MtdPartition
device_perform_action	default_recovery_ui.c	/^int device_perform_action(int which) {$/;"	f
device_reboot_now	default_recovery_ui.c	/^int device_reboot_now(volatile char* key_pressed, int key_code) {$/;"	f
device_recovery_start	default_recovery_ui.c	/^int device_recovery_start() {$/;"	f
device_toggle_display	default_recovery_keys.c	/^int device_toggle_display(volatile char* key_pressed, int key_code) {$/;"	f
device_ui_init	default_recovery_ui.c	/^void device_ui_init(UIParameters* ui_parameters) {$/;"	f
device_volumes	roots.c	/^Volume* device_volumes;$/;"	v
device_wipe_data	default_recovery_ui.c	/^int device_wipe_data() {$/;"	f
dfirstsec	mmcutils/mmcutils.c	/^    unsigned dfirstsec;$/;"	m	struct:MmcPartition	file:
die	mtdutils/bml_over_mtd.c	/^static int die(const char *msg, ...) {$/;"	f	file:
dirCreateHierarchy	minzip/DirUtil.c	/^dirCreateHierarchy(const char *path, int mode,$/;"	f
dirSetHierarchyPermissions	minzip/DirUtil.c	/^dirSetHierarchyPermissions(const char *path,$/;"	f
dirUnlinkHierarchy	minzip/DirUtil.c	/^dirUnlinkHierarchy(const char *path)$/;"	f
disable_tcp_nagle	minadbd/sysdeps.h	/^static __inline__ void  disable_tcp_nagle(int fd)$/;"	f
disconnect	minadbd/sockets.c	/^    adisconnect  disconnect;$/;"	m	struct:aremotesocket	file:
disconnects	minadbd/adb.h	/^    adisconnect  disconnects;$/;"	m	struct:atransport
do_sha256sum	dedupe/dedupe.c	/^static void do_sha256sum(FILE *mfile, unsigned char *rptr) {$/;"	f	file:
do_sha256sum_file	dedupe/dedupe.c	/^static int do_sha256sum_file(const char* filename, unsigned char *rptr) {$/;"	f	file:
double_buffering	minui/graphics.c	/^static unsigned double_buffering = 0;$/;"	v	file:
draw_background_locked	ui.c	/^static void draw_background_locked(int icon)$/;"	f	file:
draw_install_overlay_locked	ui.c	/^static void draw_install_overlay_locked(int frame) {$/;"	f	file:
draw_progress_locked	ui.c	/^static void draw_progress_locked()$/;"	f	file:
draw_screen_locked	ui.c	/^static void draw_screen_locked(void)$/;"	f	file:
draw_text_line	ui.c	/^static void draw_text_line(int row, const char* t, int align) {$/;"	f	file:
dsize	mmcutils/mmcutils.c	/^    unsigned dsize;$/;"	m	struct:MmcPartition	file:
dstatus	mmcutils/mmcutils.c	/^    unsigned dstatus;$/;"	m	struct:MmcPartition	file:
dtype	mmcutils/mmcutils.c	/^    unsigned dtype ;$/;"	m	struct:MmcPartition	file:
dual_boot_message	bootloader.h	/^struct dual_boot_message {$/;"	s
dump_all_fds	minadbd/fdevent.c	/^static inline void dump_all_fds(const char *extra_msg) {}$/;"	f	file:
dump_all_fds	minadbd/fdevent.c	/^static void dump_all_fds(const char *extra_msg)$/;"	f	file:
dump_bml_partition	mtdutils/bml_over_mtd.c	/^static int dump_bml_partition(const MtdPartition* pSrcPart, const MtdPartition* pReservoirPart,$/;"	f	file:
dump_fde	minadbd/fdevent.c	/^static void dump_fde(fdevent *fde, const char *info)$/;"	f	file:
dump_fde	minadbd/fdevent.c	82;"	d	file:
dump_hex	minadbd/transport.c	/^static void  dump_hex( const unsigned char*  ptr, size_t  len )$/;"	f	file:
dump_packet	minadbd/transport.c	/^dump_packet(const char* name, const char* func, apacket* p)$/;"	f	file:
dupe_string	roots.c	/^static char* dupe_string(const char* sz) {$/;"	f	file:
edify_cflags	edify/Android.mk	/^edify_cflags := -x c$/;"	m
edify_main	edifyscripting.c	/^int edify_main(int argc, char** argv) {$/;"	f
edify_src_files	edify/Android.mk	/^edify_src_files := \\$/;"	m
eheight	minui/font_10x10.h	/^	unsigned eheight;$/;"	m	struct:__anon28
eheight	minui/font_12x12.h	/^	unsigned eheight;$/;"	m	struct:__anon24
eheight	minui/font_14x14.h	/^	unsigned eheight;$/;"	m	struct:__anon33
eheight	minui/font_16x16.h	/^	unsigned eheight;$/;"	m	struct:__anon37
eheight	minui/font_18x18.h	/^	unsigned eheight;$/;"	m	struct:__anon19
eheight	minui/font_20x20.h	/^	unsigned eheight;$/;"	m	struct:__anon34
eheight	minui/font_24x24.h	/^	unsigned eheight;$/;"	m	struct:__anon36
eheight	minui/font_28x28.h	/^	unsigned eheight;$/;"	m	struct:__anon31
eheight	minui/font_32x32.h	/^	unsigned eheight;$/;"	m	struct:__anon25
eheight	minui/font_36x36.h	/^	unsigned eheight;$/;"	m	struct:__anon22
eheight	minui/font_40x40.h	/^	unsigned eheight;$/;"	m	struct:__anon21
eheight	minui/font_50x50.h	/^	unsigned eheight;$/;"	m	struct:__anon26
eheight	minui/font_60x60.h	/^	unsigned eheight;$/;"	m	struct:__anon35
end	edify/expr.h	/^    int start, end;$/;"	m	struct:Expr
end	edify/yydefs.h	/^    int start, end;$/;"	m	struct:__anon10
enqueue	minadbd/adb.h	/^    int (*enqueue)(asocket *s, apacket *pkt);$/;"	m	struct:asocket
ensure_directory	nandroid.c	/^static void ensure_directory(const char* dir) {$/;"	f	file:
ensure_path_mounted	roots.c	/^int ensure_path_mounted(const char* path) {$/;"	f
ensure_path_mounted_at_mount_point	roots.c	/^int ensure_path_mounted_at_mount_point(const char* path, const char* mount_point) {$/;"	f
ensure_path_unmounted	roots.c	/^int ensure_path_unmounted(const char* path) {$/;"	f
epoll_fd	minadbd/fdevent.c	/^static int epoll_fd = -1;$/;"	v	file:
erase_partition	flashutils/flashutils.c	/^int erase_partition(const char *partition, const char *filesystem)$/;"	f
erase_raw_partition	flashutils/flashutils.c	/^int erase_raw_partition(const char* partitionType, const char *partition)$/;"	f
erase_size	mtdutils/mtdutils.h	/^    unsigned int erase_size;$/;"	m	struct:MtdPartition
erase_volume	recovery.c	/^erase_volume(const char *volume) {$/;"	f	file:
errmsg	edify/expr.h	/^    char* errmsg;$/;"	m	struct:__anon7
error_fds	minadbd/fdevent.c	/^static fd_set error_fds;$/;"	v	file:
ev_add_fd	minui/events.c	/^int ev_add_fd(int fd, ev_callback cb, void *data)$/;"	f
ev_callback	minui/minui.h	/^typedef int (*ev_callback)(int fd, short revents, void *data);$/;"	t
ev_count	minui/events.c	/^static unsigned ev_count = 0;$/;"	v	file:
ev_dev_count	minui/events.c	/^static unsigned ev_dev_count = 0;$/;"	v	file:
ev_dispatch	minui/events.c	/^void ev_dispatch(void)$/;"	f
ev_exit	minui/events.c	/^void ev_exit(void)$/;"	f
ev_fdinfo	minui/events.c	/^static struct fd_info ev_fdinfo[MAX_DEVICES + MAX_MISC_FDS];$/;"	v	typeref:struct:fd_info	file:
ev_fds	minui/events.c	/^static struct pollfd ev_fds[MAX_DEVICES + MAX_MISC_FDS];$/;"	v	typeref:struct:pollfd	file:
ev_get_input	minui/events.c	/^int ev_get_input(int fd, short revents, struct input_event *ev)$/;"	f
ev_init	minui/events.c	/^int ev_init(ev_callback input_cb, void *data)$/;"	f
ev_misc_count	minui/events.c	/^static unsigned ev_misc_count = 0;$/;"	v	file:
ev_set_key_callback	minui/minui.h	/^typedef int (*ev_set_key_callback)(int code, int value, void *data);$/;"	t
ev_sync_key_state	minui/events.c	/^int ev_sync_key_state(ev_set_key_callback set_key_cb, void *data)$/;"	f
ev_wait	minui/events.c	/^int ev_wait(int timeout)$/;"	f
events	minadbd/fdevent.h	/^    unsigned short events;$/;"	m	struct:fdevent
events	minadbd/sysdeps.h	/^    unsigned short events;$/;"	m	struct:fdevent
ewidth	minui/font_10x10.h	/^	unsigned ewidth;$/;"	m	struct:__anon28
ewidth	minui/font_12x12.h	/^	unsigned ewidth;$/;"	m	struct:__anon24
ewidth	minui/font_14x14.h	/^	unsigned ewidth;$/;"	m	struct:__anon33
ewidth	minui/font_16x16.h	/^	unsigned ewidth;$/;"	m	struct:__anon37
ewidth	minui/font_18x18.h	/^	unsigned ewidth;$/;"	m	struct:__anon19
ewidth	minui/font_20x20.h	/^	unsigned ewidth;$/;"	m	struct:__anon34
ewidth	minui/font_24x24.h	/^	unsigned ewidth;$/;"	m	struct:__anon36
ewidth	minui/font_28x28.h	/^	unsigned ewidth;$/;"	m	struct:__anon31
ewidth	minui/font_32x32.h	/^	unsigned ewidth;$/;"	m	struct:__anon25
ewidth	minui/font_36x36.h	/^	unsigned ewidth;$/;"	m	struct:__anon22
ewidth	minui/font_40x40.h	/^	unsigned ewidth;$/;"	m	struct:__anon21
ewidth	minui/font_50x50.h	/^	unsigned ewidth;$/;"	m	struct:__anon26
ewidth	minui/font_60x60.h	/^	unsigned ewidth;$/;"	m	struct:__anon35
exclude	Android.mk	/^exclude := tune2fs mke2fs$/;"	m
exclude_count	dedupe/dedupe.c	/^    int exclude_count;$/;"	m	struct:DEDUPE_STORE_CONTEXT	file:
excludes	dedupe/dedupe.c	/^    const char** excludes;$/;"	m	struct:DEDUPE_STORE_CONTEXT	file:
expect	edify/main.c	/^int expect(const char* expr_str, const char* expected, int* errors) {$/;"	f
expect_fail	verifier_test.sh	/^expect_fail() {$/;"	f
expect_succeed	verifier_test.sh	/^expect_succeed() {$/;"	f
expr	edify/parser.y	/^expr:  STRING {$/;"	l
ext3_count	mmcutils/mmcutils.c	/^unsigned ext3_count = 0;$/;"	v
ext3_partitions	mmcutils/mmcutils.c	/^char *ext3_partitions[] = {"system", "userdata", "cache", "NONE"};$/;"	v
extendedcommand_file_exists	edifyscripting.c	/^int extendedcommand_file_exists()$/;"	f
externalFileAttributes	minzip/Zip.h	/^    long         externalFileAttributes;$/;"	m	struct:ZipEntry
extra	minadbd/adb.h	/^    void *extra;$/;"	m	struct:asocket
f	tools/ota/convert-to-bmp.py	/^  f = open(outfile, "wb")$/;"	v
fail	applypatch/applypatch.sh	/^fail() {$/;"	f
fail	applypatch/imgdiff_test.sh	/^fail() {$/;"	f
fail	verifier_test.sh	/^fail() {$/;"	f
fail_bitmap_length	bootloader.c	/^    unsigned fail_bitmap_length;$/;"	m	struct:update_header	file:
fail_bitmap_offset	bootloader.c	/^    unsigned fail_bitmap_offset;$/;"	m	struct:update_header	file:
false	minelf/Retouch.c	32;"	d	file:
fatal	minadbd/adb.c	/^void fatal(const char *fmt, ...)$/;"	f
fatal	minadbd/fdevent.c	/^static void fatal(const char *fn, const char *fmt, ...)$/;"	f	file:
fatal_errno	minadbd/adb.c	/^void fatal_errno(const char *fmt, ...)$/;"	f
fd	minadbd/adb.h	/^    int fd;$/;"	m	struct:asocket
fd	minadbd/adb.h	/^    int fd;$/;"	m	struct:atransport
fd	minadbd/fdevent.h	/^    int fd;$/;"	m	struct:fdevent
fd	minadbd/services.c	/^    int fd;$/;"	m	struct:stinfo	file:
fd	minadbd/sysdeps.h	/^    int fd;$/;"	m	struct:fdevent
fd	minadbd/usb_linux_client.c	/^    int fd;$/;"	m	struct:usb_handle	file:
fd	minzip/Zip.h	/^    int         fd;$/;"	m	struct:ZipArchive
fd	mtdutils/bml_over_mtd.c	/^	int fd;$/;"	m	struct:BmlOverMtdReadContext	file:
fd	mtdutils/bml_over_mtd.c	/^	int fd;$/;"	m	struct:BmlOverMtdWriteContext	file:
fd	mtdutils/mtdutils.c	/^    int fd;$/;"	m	struct:MtdReadContext	file:
fd	mtdutils/mtdutils.c	/^    int fd;$/;"	m	struct:MtdWriteContext	file:
fd_func	minadbd/fdevent.h	/^typedef void (*fd_func)(int fd, unsigned events, void *userdata);$/;"	t
fd_func	minadbd/sysdeps.h	/^typedef void (*fd_func)(int fd, unsigned events, void *userdata);$/;"	t
fd_info	minui/events.c	/^struct fd_info {$/;"	s	file:
fd_table	minadbd/fdevent.c	/^static fdevent **fd_table = 0;$/;"	v	file:
fd_table_max	minadbd/fdevent.c	/^static int fd_table_max = 0;$/;"	v	file:
fde	minadbd/adb.h	/^    fdevent fde;$/;"	m	struct:asocket
fdevent	minadbd/fdevent.h	/^struct fdevent $/;"	s
fdevent	minadbd/fdevent.h	/^typedef struct fdevent fdevent;$/;"	t	typeref:struct:fdevent
fdevent	minadbd/sysdeps.h	/^struct fdevent {$/;"	s
fdevent	minadbd/sysdeps.h	/^typedef struct fdevent fdevent;$/;"	t	typeref:struct:fdevent
fdevent_add	minadbd/fdevent.c	/^void fdevent_add(fdevent *fde, unsigned events)$/;"	f
fdevent_call_fdfunc	minadbd/fdevent.c	/^static void fdevent_call_fdfunc(fdevent* fde)$/;"	f	file:
fdevent_connect	minadbd/fdevent.c	/^static void fdevent_connect(fdevent *fde)$/;"	f	file:
fdevent_create	minadbd/fdevent.c	/^fdevent *fdevent_create(int fd, fd_func func, void *arg)$/;"	f
fdevent_del	minadbd/fdevent.c	/^void fdevent_del(fdevent *fde, unsigned events)$/;"	f
fdevent_destroy	minadbd/fdevent.c	/^void fdevent_destroy(fdevent *fde)$/;"	f
fdevent_disconnect	minadbd/fdevent.c	/^static void fdevent_disconnect(fdevent *fde)$/;"	f	file:
fdevent_fd_check	minadbd/fdevent.c	/^static int fdevent_fd_check(fd_set *fds)$/;"	f	file:
fdevent_init	minadbd/fdevent.c	/^static void fdevent_init()$/;"	f	file:
fdevent_init	minadbd/fdevent.c	/^static void fdevent_init(void)$/;"	f	file:
fdevent_install	minadbd/fdevent.c	/^void fdevent_install(fdevent *fde, int fd, fd_func func, void *arg)$/;"	f
fdevent_loop	minadbd/fdevent.c	/^void fdevent_loop()$/;"	f
fdevent_plist_dequeue	minadbd/fdevent.c	/^static fdevent *fdevent_plist_dequeue(void)$/;"	f	file:
fdevent_plist_enqueue	minadbd/fdevent.c	/^static void fdevent_plist_enqueue(fdevent *node)$/;"	f	file:
fdevent_plist_remove	minadbd/fdevent.c	/^static void fdevent_plist_remove(fdevent *node)$/;"	f	file:
fdevent_process	minadbd/fdevent.c	/^static void fdevent_process()$/;"	f	file:
fdevent_register	minadbd/fdevent.c	/^static void fdevent_register(fdevent *fde)$/;"	f	file:
fdevent_remove	minadbd/fdevent.c	/^void fdevent_remove(fdevent *fde)$/;"	f
fdevent_set	minadbd/fdevent.c	/^void fdevent_set(fdevent *fde, unsigned events)$/;"	f
fdevent_subproc_event_func	minadbd/fdevent.c	/^static void fdevent_subproc_event_func(int fd, unsigned ev, void *userdata)$/;"	f	file:
fdevent_subproc_setup	minadbd/fdevent.c	/^void fdevent_subproc_setup()$/;"	f
fdevent_unregister	minadbd/fdevent.c	/^static void fdevent_unregister(fdevent *fde)$/;"	f	file:
fdevent_update	minadbd/fdevent.c	/^static void fdevent_update(fdevent *fde, unsigned events)$/;"	f	file:
fi	minui/graphics.c	/^static struct fb_fix_screeninfo fi;$/;"	v	typeref:struct:fb_fix_screeninfo	file:
fileName	minzip/Zip.h	/^    const char*  fileName;       \/\/ not null-terminated$/;"	m	struct:ZipEntry
fileNameLen	minzip/Zip.h	/^    unsigned int fileNameLen;$/;"	m	struct:ZipEntry
file_event_callback	nandroid.c	/^typedef void (*file_event_callback)(const char* filename);$/;"	t	file:
fileentry_compare	applypatch/imgdiff.c	/^static int fileentry_compare(const void* a, const void* b) {$/;"	f	file:
fileheadersize	tools/ota/convert-to-bmp.py	/^  fileheadersize = struct.calcsize(BMP_HEADER_FMT)$/;"	v
filename	applypatch/imgdiff.c	/^  char* filename;       \/\/ used for zip entries$/;"	m	struct:__anon2	file:
filename	applypatch/imgdiff.c	/^  char* filename;$/;"	m	struct:__anon3	file:
filesystem	mmcutils/mmcutils.c	/^    char *filesystem;$/;"	m	struct:MmcPartition	file:
filesystem	mounts.h	/^ const char *filesystem;$/;"	m	struct:__anon48
find_local_socket	minadbd/sockets.c	/^asocket *find_local_socket(unsigned id)$/;"	f
find_mounted_volume_by_device	mounts.c	/^find_mounted_volume_by_device(const char *device)$/;"	f
find_mounted_volume_by_mount_point	mounts.c	/^find_mounted_volume_by_mount_point(const char *mount_point)$/;"	f
finish_recovery	recovery.c	/^finish_recovery(const char *send_intent) {$/;"	f	file:
firmware_update_pending	firmware.c	/^int firmware_update_pending() {$/;"	f
fix_endians	minadbd/transport_usb.c	/^static inline void fix_endians(apacket *p)$/;"	f	file:
fix_endians	minadbd/transport_usb.c	42;"	d	file:
flags	mounts.h	/^ const char *flags;$/;"	m	struct:__anon48
flash_bml_partition	mtdutils/bml_over_mtd.c	/^static int flash_bml_partition(const MtdPartition* pSrcPart, const MtdPartition* pReservoirPart,$/;"	f	file:
flash_type	flashutils/flashutils.h	/^enum flash_type {$/;"	g
fn	edify/expr.h	/^    Function fn;$/;"	m	struct:Expr
fn	edify/expr.h	/^  Function fn;$/;"	m	struct:__anon9
fn	make-overlay.py	/^  fn = "icon_installing_overlay%02d.png" % (num+1,)$/;"	v
fn	make-overlay.py	/^fn = "icon_installing.png"$/;"	v
fn_entries	edify/expr.c	/^static int fn_entries = 0;$/;"	v	file:
fn_entry_compare	edify/expr.c	/^static int fn_entry_compare(const void* a, const void* b) {$/;"	f	file:
fn_size	edify/expr.c	/^static int fn_size = 0;$/;"	v	file:
fn_table	edify/expr.c	/^NamedFunction* fn_table = NULL;$/;"	v
font	minui/courier_extended_15x24.h	/^} font = {$/;"	v	typeref:struct:__anon27
font	minui/font_10x10.h	/^} font = {$/;"	v	typeref:struct:__anon28
font	minui/font_10x18.h	/^} font = {$/;"	v	typeref:struct:__anon23
font	minui/font_12x12.h	/^} font = {$/;"	v	typeref:struct:__anon24
font	minui/font_14x14.h	/^} font = {$/;"	v	typeref:struct:__anon33
font	minui/font_16x16.h	/^} font = {$/;"	v	typeref:struct:__anon37
font	minui/font_18x18.h	/^} font = {$/;"	v	typeref:struct:__anon19
font	minui/font_20x20.h	/^} font = {$/;"	v	typeref:struct:__anon34
font	minui/font_24x24.h	/^} font = {$/;"	v	typeref:struct:__anon36
font	minui/font_28x28.h	/^} font = {$/;"	v	typeref:struct:__anon31
font	minui/font_32x32.h	/^} font = {$/;"	v	typeref:struct:__anon25
font	minui/font_36x36.h	/^} font = {$/;"	v	typeref:struct:__anon22
font	minui/font_40x40.h	/^} font = {$/;"	v	typeref:struct:__anon21
font	minui/font_50x50.h	/^} font = {$/;"	v	typeref:struct:__anon26
font	minui/font_60x60.h	/^} font = {$/;"	v	typeref:struct:__anon35
font	minui/font_7x16.h	/^} font = {$/;"	v	typeref:struct:__anon38
font	minui/roboto_10x18.h	/^} font = {$/;"	v	typeref:struct:__anon29
font	minui/roboto_15x24.h	/^} font = {$/;"	v	typeref:struct:__anon32
font	minui/roboto_23x41.h	/^} font = {$/;"	v	typeref:struct:__anon30
font_ftex	minui/graphics.c	/^static GGLSurface font_ftex;$/;"	v	file:
fontdata	minui/graphics.c	/^    void** fontdata;$/;"	m	struct:__anon20	file:
fopen_path	recovery.c	/^fopen_path(const char *path, const char *mode) {$/;"	f
force_eof	minadbd/fdevent.h	/^    int force_eof;$/;"	m	struct:fdevent
force_eof	minadbd/sysdeps.h	/^    int force_eof;$/;"	m	struct:fdevent
forced_backup_format	nandroid.c	/^static char forced_backup_format[5] = "";$/;"	v	file:
format_device	extendedcommands.c	/^int format_device(const char *device, const char *path, const char *fs_type) {$/;"	f
format_ext2_device	mmcutils/mmcutils.c	/^format_ext2_device (const char *device) {$/;"	f
format_ext3_device	mmcutils/mmcutils.c	/^format_ext3_device (const char *device) {$/;"	f
format_rfs_device	bmlutils/bmlutils.c	/^int format_rfs_device (const char *device, const char *path) {$/;"	f
format_unknown_device	extendedcommands.c	/^int format_unknown_device(const char *device, const char* path, const char *fs_type)$/;"	f
format_volume	roots.c	/^int format_volume(const char* volume) {$/;"	f
fp	libcrecovery/popen.c	/^	FILE *fp;$/;"	m	struct:pid	file:
fp_all	utilities/fix_permissions	/^fp_all()$/;"	f
fp_chmod	utilities/fix_permissions	/^fp_chmod()$/;"	f
fp_chown_gid	utilities/fix_permissions	/^fp_chown_gid()$/;"	f
fp_chown_uid	utilities/fix_permissions	/^fp_chown_uid()$/;"	f
fp_end	utilities/fix_permissions	/^fp_end()$/;"	f
fp_package	utilities/fix_permissions	/^fp_package()$/;"	f
fp_parseargs	utilities/fix_permissions	/^fp_parseargs()$/;"	f
fp_print	utilities/fix_permissions	/^fp_print()$/;"	f
fp_single	utilities/fix_permissions	/^fp_single()$/;"	f
fp_start	utilities/fix_permissions	/^fp_start()$/;"	f
fp_usage	utilities/fix_permissions	/^fp_usage()$/;"	f
freeFunc	minzip/Hash.h	/^    HashFreeFunc freeFunc;$/;"	m	struct:HashTable
free_space	applypatch/applypatch.sh	/^free_space() {$/;"	f
free_string_array	extendedcommands.c	/^void free_string_array(char** array)$/;"	f
free_volume_internals	mounts.c	/^free_volume_internals(const MountedVolume *volume, int zero)$/;"	f	file:
fs_options	common.h	/^    const char* fs_options;$/;"	m	struct:__anon5
fs_options2	common.h	/^    const char* fs_options2;$/;"	m	struct:__anon5
fs_type	common.h	/^    const char* fs_type;      \/\/ "yaffs2" or "ext4" or "vfat"$/;"	m	struct:__anon5
fs_type2	common.h	/^    const char* fs_type2;$/;"	m	struct:__anon5
func	minadbd/adb.h	/^    void        (*func)(void*  opaque, atransport*  t);$/;"	m	struct:adisconnect
func	minadbd/fdevent.h	/^    fd_func func;$/;"	m	struct:fdevent
func	minadbd/services.c	/^    void (*func)(int fd, void *cookie);$/;"	m	struct:stinfo	file:
func	minadbd/sysdeps.h	/^    fd_func func;$/;"	m	struct:fdevent
gBackground	ui.c	/^static gr_surface gBackground;$/;"	v	file:
gBackgroundIcon	ui.c	/^static gr_surface gBackgroundIcon[NUM_BACKGROUND_ICONS];$/;"	v	file:
gCurrentIcon	ui.c	/^static int gCurrentIcon = 0;$/;"	v	file:
gInstallationOverlay	ui.c	/^static gr_surface *gInstallationOverlay;$/;"	v	file:
gInstallingFrame	ui.c	/^static int gInstallingFrame = 0;$/;"	v	file:
gPagesIdentical	ui.c	/^static int gPagesIdentical = 0;$/;"	v	file:
gProgress	ui.c	/^static float gProgressScopeStart = 0, gProgressScopeSize = 0, gProgress = 0;$/;"	v	file:
gProgressBarEmpty	ui.c	/^static gr_surface gProgressBarEmpty;$/;"	v	file:
gProgressBarFill	ui.c	/^static gr_surface gProgressBarFill;$/;"	v	file:
gProgressBarIndeterminate	ui.c	/^static gr_surface *gProgressBarIndeterminate;$/;"	v	file:
gProgressBarType	ui.c	/^} gProgressBarType = PROGRESSBAR_TYPE_NONE;$/;"	v	typeref:enum:ProgressBarType	file:
gProgressScopeDuration	ui.c	/^static double gProgressScopeTime, gProgressScopeDuration;$/;"	v	file:
gProgressScopeSize	ui.c	/^static float gProgressScopeStart = 0, gProgressScopeSize = 0, gProgress = 0;$/;"	v	file:
gProgressScopeStart	ui.c	/^static float gProgressScopeStart = 0, gProgressScopeSize = 0, gProgress = 0;$/;"	v	file:
gProgressScopeTime	ui.c	/^static double gProgressScopeTime, gProgressScopeDuration;$/;"	v	file:
gShowBackButton	ui.c	/^static int gShowBackButton = 0;$/;"	v	file:
gShowBackButton	ui.c	/^static int gShowBackButton = 1;$/;"	v	file:
gUpdateMutex	ui.c	/^static pthread_mutex_t gUpdateMutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
g_mmc_state	mmcutils/mmcutils.c	/^static MmcState g_mmc_state = {$/;"	v	file:
g_mounts_state	mounts.c	/^static MountsState g_mounts_state = {$/;"	v	file:
g_mtd_state	mtdutils/mtdutils.c	/^static MtdState g_mtd_state = {$/;"	v	file:
gather_files	extendedcommands.c	/^char** gather_files(const char* directory, const char* fileExtensionOrDirectory, int* numFiles)$/;"	f
get1	minzip/Bits.h	/^INLINE unsigned char get1(unsigned const char* pSrc)$/;"	f
get2BE	minzip/Bits.h	/^INLINE unsigned short get2BE(unsigned char const* pSrc)$/;"	f
get2LE	minzip/Bits.h	/^INLINE unsigned short get2LE(unsigned char const* pSrc)$/;"	f
get4BE	minzip/Bits.h	/^INLINE unsigned int get4BE(unsigned char const* pSrc)$/;"	f
get4LE	minzip/Bits.h	/^INLINE unsigned int get4LE(unsigned char const* pSrc)$/;"	f
get8BE	minzip/Bits.h	/^INLINE unsigned long long get8BE(unsigned char const* pSrc)$/;"	f
get8LE	minzip/Bits.h	/^INLINE unsigned long long get8LE(unsigned char const* pSrc)$/;"	f
getCharID	minui/graphics.c	/^int getCharID(const char* s, void* pFont)$/;"	f
getFileStartAndLength	minzip/SysUtil.c	/^static int getFileStartAndLength(int fd, off_t *start_, size_t *length_)$/;"	f	file:
getPathDirStatus	minzip/DirUtil.c	/^getPathDirStatus(const char *path)$/;"	f	file:
get_allow_toggle_display	recovery.c	/^int get_allow_toggle_display() {$/;"	f
get_apacket	minadbd/adb.c	/^apacket *get_apacket(void)$/;"	f
get_args	recovery.c	/^get_args(int *argc, char ***argv) {$/;"	f	file:
get_backup_handler	nandroid.c	/^static nandroid_backup_handler get_backup_handler(const char *backup_path) {$/;"	f	file:
get_batt_stats	ui.c	/^int get_batt_stats(void) {$/;"	f
get_bootloader_message	bootloader.c	/^int get_bootloader_message(struct bootloader_message *out) {$/;"	f
get_bootloader_message_block	bootloader.c	/^static int get_bootloader_message_block(struct bootloader_message *out,$/;"	f	file:
get_bootloader_message_mtd	bootloader.c	/^static int get_bootloader_message_mtd(struct bootloader_message *out,$/;"	f	file:
get_chargemode	recovery.c	/^int get_chargemode() {$/;"	f
get_current_system_id	bootloader.c	/^int get_current_system_id(void) {$/;"	f
get_default_filesystem	flashutils/flashutils.c	/^char* get_default_filesystem()$/;"	f
get_device_volumes	roots.c	/^Volume* get_device_volumes() {$/;"	f
get_filtered_menu_selection	extendedcommands.c	/^get_filtered_menu_selection(char** headers, char** items, int menu_only, int initial_selection, int items_count) {$/;"	f
get_flash_type	flashutils/flashutils.c	/^int get_flash_type(const char* partitionType) {$/;"	f
get_framebuffer	minui/graphics.c	/^static int get_framebuffer(GGLSurface *fb)$/;"	f	file:
get_memory_surface	minui/graphics.c	/^static void get_memory_surface(GGLSurface* ms) {$/;"	f	file:
get_menu_selection	recovery.c	/^get_menu_selection(char** headers, char** items, int menu_only,$/;"	f
get_num_volumes	roots.c	/^int get_num_volumes() {$/;"	f
get_partition_device	flashutils/flashutils.c	/^int get_partition_device(const char *partition, char *device)$/;"	f
get_restore_handler	nandroid.c	/^static nandroid_restore_handler get_restore_handler(const char *backup_path) {$/;"	f	file:
gr_active_fb	minui/graphics.c	/^static unsigned gr_active_fb = 0;$/;"	v	file:
gr_blit	minui/graphics.c	/^void gr_blit(gr_surface source, int sx, int sy, int w, int h, int dx, int dy) {$/;"	f
gr_color	minui/graphics.c	/^void gr_color(unsigned char r, unsigned char g, unsigned char b, unsigned char a)$/;"	f
gr_context	minui/graphics.c	/^static GGLContext *gr_context = 0;$/;"	v	file:
gr_exit	minui/graphics.c	/^void gr_exit(void)$/;"	f
gr_fb_blank	minui/graphics.c	/^int gr_fb_blank(int blank)$/;"	f
gr_fb_data	minui/graphics.c	/^gr_pixel *gr_fb_data(void)$/;"	f
gr_fb_fd	minui/graphics.c	/^static int gr_fb_fd = -1;$/;"	v	file:
gr_fb_height	minui/graphics.c	/^int gr_fb_height(void)$/;"	f
gr_fb_width	minui/graphics.c	/^int gr_fb_width(void)$/;"	f
gr_fill	minui/graphics.c	/^void gr_fill(int x, int y, int w, int h)$/;"	f
gr_flip	minui/graphics.c	/^void gr_flip(void)$/;"	f
gr_font	minui/graphics.c	/^static GRFont *gr_font = 0;$/;"	v	file:
gr_font_size	minui/graphics.c	/^void gr_font_size(int *x, int *y)$/;"	f
gr_font_texture	minui/graphics.c	/^static GGLSurface gr_font_texture;$/;"	v	file:
gr_framebuffer	minui/graphics.c	/^static GGLSurface gr_framebuffer[NUM_BUFFERS];$/;"	v	file:
gr_get_height	minui/graphics.c	/^unsigned int gr_get_height(gr_surface surface) {$/;"	f
gr_get_width	minui/graphics.c	/^unsigned int gr_get_width(gr_surface surface) {$/;"	f
gr_init	minui/graphics.c	/^int gr_init(void)$/;"	f
gr_init_font	minui/graphics.c	/^static void gr_init_font(void)$/;"	f	file:
gr_measure	minui/graphics.c	/^int gr_measure(const char *s)$/;"	f
gr_mem_surface	minui/graphics.c	/^static GGLSurface gr_mem_surface;$/;"	v	file:
gr_pixel	minui/minui.h	/^typedef unsigned short gr_pixel;$/;"	t
gr_surface	minui/minui.h	/^typedef void* gr_surface;$/;"	t
gr_text	minui/graphics.c	/^int gr_text(int x, int y, const char *s)$/;"	f
gr_texticon	minui/graphics.c	/^void gr_texticon(int x, int y, gr_surface icon) {$/;"	f
gr_vt_fd	minui/graphics.c	/^static int gr_vt_fd = -1;$/;"	v	file:
h	make-overlay.py	/^h = maxmaxj - minminj + 1$/;"	v
handle_chargemode	extendedcommands.c	/^void handle_chargemode() {$/;"	f
handle_failure	extendedcommands.c	/^void handle_failure(int ret)$/;"	f
handle_firmware_update	install.c	/^handle_firmware_update(char* type, char* filename, ZipArchive* zip) {$/;"	f	file:
handle_offline	minadbd/adb.c	/^void handle_offline(atransport *t)$/;"	f
handle_online	minadbd/adb.c	/^void handle_online(void)$/;"	f
handle_packet	minadbd/adb.c	/^void handle_packet(apacket *p, atransport *t)$/;"	f
hasInitializedEdify	edifyscripting.c	/^static int hasInitializedEdify = 0;$/;"	v	file:
has_datadata	extendedcommands.c	/^int has_datadata() {$/;"	f
hashValue	minzip/Hash.h	/^    unsigned int hashValue;$/;"	m	struct:HashEntry
hashcmpZipEntry	minzip/Zip.c	/^static int hashcmpZipEntry(const void* ventry1, const void* ventry2)$/;"	f	file:
hashcmpZipName	minzip/Zip.c	/^static int hashcmpZipName(const void* ventry, const void* vname)$/;"	f	file:
header	tools/ota/convert-to-bmp.py	/^  header = struct.pack(BMP_HEADER_FMT,$/;"	v
height	minui/courier_extended_15x24.h	/^  unsigned height;$/;"	m	struct:__anon27
height	minui/font_10x18.h	/^  unsigned height;$/;"	m	struct:__anon23
height	minui/font_7x16.h	/^  unsigned height;$/;"	m	struct:__anon38
height	minui/roboto_10x18.h	/^  unsigned height;$/;"	m	struct:__anon29
height	minui/roboto_15x24.h	/^  unsigned height;$/;"	m	struct:__anon32
height	minui/roboto_23x41.h	/^  unsigned height;$/;"	m	struct:__anon30
host_to_le32	minadbd/transport_usb.c	/^unsigned host_to_le32(unsigned n)$/;"	f
id	minadbd/adb.h	/^    unsigned id;$/;"	m	struct:asocket
idx	minzip/Hash.h	/^    int         idx;$/;"	m	struct:HashIter
im	tools/ota/convert-to-bmp.py	/^im = Image.open(infile)$/;"	v
image_length	bootloader.c	/^    unsigned image_length;$/;"	m	struct:update_header	file:
image_offset	bootloader.c	/^    unsigned image_offset;$/;"	m	struct:update_header	file:
inc	updater/Android.mk	/^inc := $(call intermediates-dir-for,PACKAGING,updater_extensions)\/register.inc$/;"	m
indeterminate_frames	common.h	/^    int indeterminate_frames;$/;"	m	struct:__anon6
infile	tools/ota/convert-to-bmp.py	/^infile = sys.argv[1]$/;"	v
info	tools/ota/convert-to-bmp.py	/^  info = struct.pack(BITMAPINFO_HEADER_FMT,$/;"	v
infoheadersize	tools/ota/convert-to-bmp.py	/^  infoheadersize = struct.calcsize(BITMAPINFO_HEADER_FMT)$/;"	v
init_compression_state	minelf/Retouch.c	/^static void init_compression_state(void) {$/;"	f	file:
init_transport_registration	minadbd/transport.c	/^void init_transport_registration(void)$/;"	f
init_usb_transport	minadbd/transport_usb.c	/^void init_usb_transport(atransport *t, usb_handle *h, int state)$/;"	f
input	edify/parser.y	/^input:  expr           { *root = $1; }$/;"	l
input_callback	ui.c	/^static int input_callback(int fd, short revents, void *data)$/;"	f	file:
input_thread	minadbd/transport.c	/^static void *input_thread(void *_t)$/;"	f	file:
input_thread	ui.c	/^static void *input_thread(void *cookie)$/;"	f	file:
insert_local_socket	minadbd/sockets.c	/^insert_local_socket(asocket*  s, asocket*  list)$/;"	f	file:
install_local_socket	minadbd/sockets.c	/^void install_local_socket(asocket *s)$/;"	f
install_overlay_offset_x	common.h	/^    int install_overlay_offset_x;$/;"	m	struct:__anon6
install_overlay_offset_y	common.h	/^    int install_overlay_offset_y;$/;"	m	struct:__anon6
install_package	install.c	/^install_package(const char* path)$/;"	f
install_zip	extendedcommands.c	/^int install_zip(const char* packagefilepath)$/;"	f
installing_frames	common.h	/^    int installing_frames;$/;"	m	struct:__anon6
is_data_media	roots.c	/^int is_data_media() {$/;"	f
is_data_media_volume_path	roots.c	/^int is_data_media_volume_path(const char* path) {$/;"	f
is_null	roots.c	/^static int is_null(const char* sz) {$/;"	f	file:
is_path_mounted	extendedcommands.c	/^int is_path_mounted(const char* path) {$/;"	f
is_safe_to_format	extendedcommands.c	/^int is_safe_to_format(char* name)$/;"	f
junk	updater/Android.mk	/^junk := $(shell mkdir -p $(dir $(inc));\\$/;"	m
kMarkerFile	tools/ota/check-lost+found.c	/^static const char *kMarkerFile = "\/data\/misc\/check-lost+found-rebooted-2";$/;"	v	file:
kOutputDir	tools/ota/check-lost+found.c	/^static const char *kOutputDir = "\/data\/tombstones";$/;"	v	file:
kOutputFile	tools/ota/check-lost+found.c	/^static const char *kOutputFile = "\/data\/tombstones\/check-lost+found-log";$/;"	v	file:
kPartitions	tools/ota/check-lost+found.c	/^static const char *kPartitions[] = { "\/system", "\/data", "\/cache", NULL };$/;"	v	file:
kTransportAny	minadbd/adb.h	/^        kTransportAny,$/;"	e	enum:transport_type
kTransportHost	minadbd/adb.h	/^        kTransportHost,$/;"	e	enum:transport_type
kTransportLocal	minadbd/adb.h	/^        kTransportLocal,$/;"	e	enum:transport_type
kTransportUsb	minadbd/adb.h	/^        kTransportUsb,$/;"	e	enum:transport_type
key_can_repeat	ui.c	/^int key_can_repeat(int key)$/;"	f
key_last_repeat	ui.c	/^static unsigned long key_last_repeat[KEY_MAX + 1], key_press_time[KEY_MAX + 1];$/;"	v	file:
key_press_time	ui.c	/^static unsigned long key_last_repeat[KEY_MAX + 1], key_press_time[KEY_MAX + 1];$/;"	v	file:
key_pressed	ui.c	/^static volatile char key_pressed[KEY_MAX + 1];$/;"	v	file:
key_queue	ui.c	/^static int key_queue[256], key_queue_len = 0;$/;"	v	file:
key_queue_cond	ui.c	/^static pthread_cond_t key_queue_cond = PTHREAD_COND_INITIALIZER;$/;"	v	file:
key_queue_len	ui.c	/^static int key_queue[256], key_queue_len = 0;$/;"	v	file:
key_queue_mutex	ui.c	/^static pthread_mutex_t key_queue_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
kick	minadbd/adb.h	/^    void (*kick)(atransport *t);$/;"	m	struct:atransport
kick_transport	minadbd/transport.c	/^kick_transport(atransport*  t)$/;"	f
kicked	minadbd/adb.h	/^    int          kicked;$/;"	m	struct:atransport
lastupdate	ui.c	/^static struct timeval lastupdate = (struct timeval) {0};$/;"	v	typeref:struct:timeval	file:
len	applypatch/imgdiff.c	/^  size_t len;$/;"	m	struct:__anon2	file:
len	minadbd/adb.h	/^    unsigned len;$/;"	m	struct:apacket
len	minzip/Zip.c	/^    long len;$/;"	m	struct:__anon41	file:
len	minzip/Zip.h	/^    size_t len;$/;"	m	struct:__anon43
length	common.h	/^    long long length;         \/\/ (ext4 partition only) when$/;"	m	struct:__anon5
length	minzip/SysUtil.h	/^    size_t  length;         \/* length of data *\/$/;"	m	struct:MemMapping
level	applypatch/imgdiff.c	/^  int level, method, windowBits, memLevel, strategy;$/;"	m	struct:__anon2	file:
libs	updater/Android.mk	/^$(inc) : libs := $(TARGET_RECOVERY_UPDATER_LIBS)$/;"	m
list_pending	minadbd/fdevent.c	/^static fdevent list_pending = {$/;"	v	file:
lmask	minui/graphics.c	/^	long    lmask;$/;"	m	struct:utf8_table	file:
load_keys	install.c	/^load_keys(const char* filename, int* numKeys) {$/;"	f	file:
load_volume_table	roots.c	/^void load_volume_table() {$/;"	f
local_socket_close	minadbd/sockets.c	/^static void local_socket_close(asocket *s)$/;"	f	file:
local_socket_close_locked	minadbd/sockets.c	/^static void local_socket_close_locked(asocket *s)$/;"	f	file:
local_socket_close_notify	minadbd/sockets.c	/^static void local_socket_close_notify(asocket *s)$/;"	f	file:
local_socket_closing_list	minadbd/sockets.c	/^static asocket local_socket_closing_list = {$/;"	v	file:
local_socket_destroy	minadbd/sockets.c	/^static void local_socket_destroy(asocket  *s)$/;"	f	file:
local_socket_enqueue	minadbd/sockets.c	/^static int local_socket_enqueue(asocket *s, apacket *p)$/;"	f	file:
local_socket_event_func	minadbd/sockets.c	/^static void local_socket_event_func(int fd, unsigned ev, void *_s)$/;"	f	file:
local_socket_list	minadbd/sockets.c	/^static asocket local_socket_list = {$/;"	v	file:
local_socket_next_id	minadbd/sockets.c	/^static unsigned local_socket_next_id = 1;$/;"	v	file:
local_socket_ready	minadbd/sockets.c	/^static void local_socket_ready(asocket *s)$/;"	f	file:
local_socket_ready_notify	minadbd/sockets.c	/^static void local_socket_ready_notify(asocket *s)$/;"	f	file:
lock	minadbd/usb_linux_client.c	/^    adb_mutex_t lock;$/;"	m	struct:usb_handle	file:
lseek	minadbd/sysdeps.h	385;"	d
lseek	minadbd/sysdeps.h	386;"	d
lstat	minadbd/sysdeps.h	85;"	d
lun	common.h	/^    const char* lun;          \/\/ (\/sdcard, \/emmc, \/external_sd only) LUN file to$/;"	m	struct:__anon5
lun_file	extendedcommands.c	/^    const char *lun_file;$/;"	m	struct:lun_node	file:
lun_head	extendedcommands.c	/^static struct lun_node *lun_head = NULL;$/;"	v	typeref:struct:lun_node	file:
lun_node	extendedcommands.c	/^struct lun_node {$/;"	s	file:
lun_tail	extendedcommands.c	/^static struct lun_node *lun_tail = NULL;$/;"	v	typeref:struct:lun_node	file:
lval	minui/graphics.c	/^	long    lval;$/;"	m	struct:utf8_table	file:
magic	minadbd/adb.h	/^    unsigned magic;         \/* command ^ 0xffffffff             *\/$/;"	m	struct:amessage
main	applypatch/imgdiff.c	/^int main(int argc, char** argv) {$/;"	f
main	applypatch/main.c	/^int main(int argc, char** argv) {$/;"	f
main	dedupe/driver.c	/^int main(int argc, char** argv) {$/;"	f
main	edify/main.c	/^int main(int argc, char** argv) {$/;"	f
main	flashutils/dump_image.c	/^int main(int argc, char **argv)$/;"	f
main	flashutils/erase_image.c	/^int main(int argc, char **argv)$/;"	f
main	flashutils/flash_image.c	/^int main(int argc, char **argv)$/;"	f
main	minui/mkfont.c	/^int main(int argc, char *argv)$/;"	f
main	mtdutils/bml_over_mtd.c	/^int main(int argc, char **argv)$/;"	f
main	recovery.c	/^main(int argc, char **argv) {$/;"	f
main	tools/ota/add-property-tag.c	/^int main(int argc, char **argv) {$/;"	f
main	tools/ota/check-lost+found.c	/^int main(int argc, char **argv) {$/;"	f
main	updater/updater.c	/^int main(int argc, char** argv) {$/;"	f
main	verifier_test.c	/^int main(int argc, char **argv) {$/;"	f
map	minzip/Zip.h	/^    MemMapping  map;$/;"	m	struct:ZipArchive
matchlen	applypatch/bsdiff.c	/^static off_t matchlen(u_char *old,off_t oldsize,u_char *new,off_t newsize)$/;"	f	file:
max_menu_rows	ui.c	/^static int max_menu_rows;$/;"	v	file:
maxi	make-overlay.py	/^  maxi = 0$/;"	v
maxj	make-overlay.py	/^  maxj = 0$/;"	v
maxmaxi	make-overlay.py	/^  maxmaxi = max(maxmaxi, maxi)$/;"	v
maxmaxi	make-overlay.py	/^maxmaxi = 0$/;"	v
maxmaxj	make-overlay.py	/^  maxmaxj = max(maxmaxj, maxj)$/;"	v
maxmaxj	make-overlay.py	/^maxmaxj = 0$/;"	v
maybe_install_firmware_update	firmware.c	/^int maybe_install_firmware_update(const char *send_intent) {$/;"	f
maybe_restart_adbd	adb_install.c	/^maybe_restart_adbd() {$/;"	f	file:
memLevel	applypatch/imgdiff.c	/^  int level, method, windowBits, memLevel, strategy;$/;"	m	struct:__anon2	file:
menu	ui.c	/^static char menu[MENU_MAX_ROWS][MENU_MAX_COLS];$/;"	v	file:
menu_items	ui.c	/^static int menu_top = 0, menu_items = 0, menu_sel = 0;$/;"	v	file:
menu_sel	ui.c	/^static int menu_top = 0, menu_items = 0, menu_sel = 0;$/;"	v	file:
menu_show_start	ui.c	/^static int menu_show_start = 0;             \/\/ this is line which menu display is starting at$/;"	v	file:
menu_top	ui.c	/^static int menu_top = 0, menu_items = 0, menu_sel = 0;$/;"	v	file:
method	applypatch/imgdiff.c	/^  int level, method, windowBits, memLevel, strategy;$/;"	m	struct:__anon2	file:
mini	make-overlay.py	/^  mini = base.size[0]-1$/;"	v
minj	make-overlay.py	/^  minj = base.size[1]-1$/;"	v
minmini	make-overlay.py	/^  minmini = min(minmini, mini)$/;"	v
minmini	make-overlay.py	/^minmini = base.size[0]-1$/;"	v
minminj	make-overlay.py	/^  minminj = min(minminj, minj)$/;"	v
minminj	make-overlay.py	/^minminj = base.size[1]-1$/;"	v
mkdir	minadbd/sysdeps.h	109;"	d
mkdir	minadbd/sysdeps.h	110;"	d
mkdir	minadbd/sysdeps.h	470;"	d
mkdir	minadbd/sysdeps.h	471;"	d
mkyaffs2image_wrapper	nandroid.c	/^static int mkyaffs2image_wrapper(const char* backup_path, const char* backup_file_image, int callback) {$/;"	f	file:
mmap_addr	minelf/Retouch.c	/^    int32_t mmap_addr;$/;"	m	struct:__anon18	file:
mmc_find_partition_by_device_index	mmcutils/mmcutils.c	/^mmc_find_partition_by_device_index(const char *device_index)$/;"	f	file:
mmc_find_partition_by_name	mmcutils/mmcutils.c	/^mmc_find_partition_by_name(const char *name)$/;"	f
mmc_format_ext3	mmcutils/mmcutils.c	/^mmc_format_ext3 (MmcPartition *partition) {$/;"	f
mmc_mount_partition	mmcutils/mmcutils.c	/^mmc_mount_partition(const MmcPartition *partition, const char *mount_point,$/;"	f
mmc_partition_name	mmcutils/mmcutils.c	/^mmc_partition_name (MmcPartition *mbr, unsigned int type) {$/;"	f	file:
mmc_raw_copy	mmcutils/mmcutils.c	/^mmc_raw_copy (const MmcPartition *partition, char *in_file) {$/;"	f
mmc_raw_dump	mmcutils/mmcutils.c	/^mmc_raw_dump (const MmcPartition *partition, char *out_file) {$/;"	f
mmc_raw_dump_internal	mmcutils/mmcutils.c	/^mmc_raw_dump_internal (const char* in_file, const char *out_file) {$/;"	f
mmc_raw_read	mmcutils/mmcutils.c	/^mmc_raw_read (const MmcPartition *partition, char *data, int data_size) {$/;"	f
mmc_raw_write	mmcutils/mmcutils.c	/^mmc_raw_write (const MmcPartition *partition, char *data, int data_size) {$/;"	f
mmc_read_mbr	mmcutils/mmcutils.c	/^mmc_read_mbr (const char *device, MmcPartition *mbr) {$/;"	f	file:
mmc_scan_partitions	mmcutils/mmcutils.c	/^mmc_scan_partitions() {$/;"	f
modTime	minzip/Zip.h	/^    long         modTime;$/;"	m	struct:ZipEntry
mount	extendedcommands.c	/^    char mount[255];$/;"	m	struct:__anon11	file:
mount_partition	flashutils/flashutils.c	/^int mount_partition(const char *partition, const char *mount_point, const char *filesystem, int read_only)$/;"	f
mount_point	common.h	/^    const char* mount_point;  \/\/ eg. "\/cache".  must live in the root directory.$/;"	m	struct:__anon5
mount_point	mounts.h	/^ const char *mount_point;$/;"	m	struct:__anon48
msg	minadbd/adb.h	/^    amessage msg;$/;"	m	struct:apacket
mtd_erase_blocks	mtdutils/mtdutils.c	/^off_t mtd_erase_blocks(MtdWriteContext *ctx, int blocks)$/;"	f
mtd_find_partition_by_name	mtdutils/mtdutils.c	/^mtd_find_partition_by_name(const char *name)$/;"	f
mtd_find_write_start	mtdutils/mtdutils.c	/^off_t mtd_find_write_start(MtdWriteContext *ctx, off_t pos) {$/;"	f
mtd_mount_partition	mtdutils/mtdutils.c	/^mtd_mount_partition(const MtdPartition *partition, const char *mount_point,$/;"	f
mtd_partition_info	mtdutils/mtdutils.c	/^mtd_partition_info(const MtdPartition *partition,$/;"	f
mtd_partitions_scanned	applypatch/applypatch.c	/^static int mtd_partitions_scanned = 0;$/;"	v	file:
mtd_read_close	mtdutils/mtdutils.c	/^void mtd_read_close(MtdReadContext *ctx)$/;"	f
mtd_read_data	mtdutils/mtdutils.c	/^ssize_t mtd_read_data(MtdReadContext *ctx, char *data, size_t len)$/;"	f
mtd_read_partition	mtdutils/mtdutils.c	/^MtdReadContext *mtd_read_partition(const MtdPartition *partition)$/;"	f
mtd_read_skip_to	mtdutils/mtdutils.c	/^void mtd_read_skip_to(const MtdReadContext* ctx, size_t offset) {$/;"	f
mtd_scan_partitions	mtdutils/mtdutils.c	/^mtd_scan_partitions()$/;"	f
mtd_write_close	mtdutils/mtdutils.c	/^int mtd_write_close(MtdWriteContext *ctx)$/;"	f
mtd_write_data	mtdutils/mtdutils.c	/^ssize_t mtd_write_data(MtdWriteContext *ctx, const char *data, size_t len)$/;"	f
mtd_write_partition	mtdutils/mtdutils.c	/^MtdWriteContext *mtd_write_partition(const MtdPartition *partition)$/;"	f
multiboot	recovery.c	/^static int multiboot = 1;$/;"	v	file:
mzCloseZipArchive	minzip/Zip.c	/^void mzCloseZipArchive(ZipArchive* pArchive)$/;"	f
mzExtractRecursive	minzip/Zip.c	/^bool mzExtractRecursive(const ZipArchive *pArchive,$/;"	f
mzExtractZipEntryToBuffer	minzip/Zip.c	/^bool mzExtractZipEntryToBuffer(const ZipArchive *pArchive,$/;"	f
mzExtractZipEntryToFile	minzip/Zip.c	/^bool mzExtractZipEntryToFile(const ZipArchive *pArchive,$/;"	f
mzFindZipEntry	minzip/Zip.c	/^const ZipEntry* mzFindZipEntry(const ZipArchive* pArchive,$/;"	f
mzGetZipEntryAt	minzip/Zip.h	/^mzGetZipEntryAt(const ZipArchive* pArchive, unsigned int index)$/;"	f
mzGetZipEntryCrc32	minzip/Zip.h	/^INLINE long mzGetZipEntryCrc32(const ZipEntry* pEntry) {$/;"	f
mzGetZipEntryFileName	minzip/Zip.h	/^INLINE UnterminatedString mzGetZipEntryFileName(const ZipEntry* pEntry) {$/;"	f
mzGetZipEntryIndex	minzip/Zip.h	/^mzGetZipEntryIndex(const ZipArchive *pArchive, const ZipEntry *pEntry) {$/;"	f
mzGetZipEntryModTime	minzip/Zip.h	/^INLINE long mzGetZipEntryModTime(const ZipEntry* pEntry) {$/;"	f
mzGetZipEntryOffset	minzip/Zip.h	/^INLINE long mzGetZipEntryOffset(const ZipEntry* pEntry) {$/;"	f
mzGetZipEntryUncompLen	minzip/Zip.h	/^INLINE long mzGetZipEntryUncompLen(const ZipEntry* pEntry) {$/;"	f
mzHashForeach	minzip/Hash.c	/^int mzHashForeach(HashTable* pHashTable, HashForeachFunc func, void* arg)$/;"	f
mzHashIterBegin	minzip/Hash.h	/^INLINE void mzHashIterBegin(HashTable* pHashTable, HashIter* pIter) {$/;"	f
mzHashIterData	minzip/Hash.h	/^INLINE void* mzHashIterData(HashIter* pIter) {$/;"	f
mzHashIterDone	minzip/Hash.h	/^INLINE bool mzHashIterDone(HashIter* pIter) {$/;"	f
mzHashIterNext	minzip/Hash.h	/^INLINE void mzHashIterNext(HashIter* pIter) {$/;"	f
mzHashSize	minzip/Hash.c	/^size_t mzHashSize(size_t size) {$/;"	f
mzHashTableClear	minzip/Hash.c	/^void mzHashTableClear(HashTable* pHashTable)$/;"	f
mzHashTableCreate	minzip/Hash.c	/^HashTable* mzHashTableCreate(size_t initialSize, HashFreeFunc freeFunc)$/;"	f
mzHashTableFree	minzip/Hash.c	/^void mzHashTableFree(HashTable* pHashTable)$/;"	f
mzHashTableLookup	minzip/Hash.c	/^void* mzHashTableLookup(HashTable* pHashTable, unsigned int itemHash, void* item,$/;"	f
mzHashTableMemUsage	minzip/Hash.h	/^INLINE int mzHashTableMemUsage(HashTable* pHashTable) {$/;"	f
mzHashTableNumEntries	minzip/Hash.h	/^INLINE int mzHashTableNumEntries(HashTable* pHashTable) {$/;"	f
mzHashTableProbeCount	minzip/Hash.c	/^void mzHashTableProbeCount(HashTable* pHashTable, HashCalcFunc calcFunc,$/;"	f
mzHashTableRemove	minzip/Hash.c	/^bool mzHashTableRemove(HashTable* pHashTable, unsigned int itemHash, void* item)$/;"	f
mzIsZipEntryIntact	minzip/Zip.c	/^bool mzIsZipEntryIntact(const ZipArchive *pArchive, const ZipEntry *pEntry)$/;"	f
mzIsZipEntrySymlink	minzip/Zip.c	/^bool mzIsZipEntrySymlink(const ZipEntry* pEntry)$/;"	f
mzOpenZipArchive	minzip/Zip.c	/^int mzOpenZipArchive(const char* fileName, ZipArchive* pArchive)$/;"	f
mzProcessZipEntryContents	minzip/Zip.c	/^bool mzProcessZipEntryContents(const ZipArchive *pArchive,$/;"	f
mzReadZipEntry	minzip/Zip.c	/^bool mzReadZipEntry(const ZipArchive* pArchive, const ZipEntry* pEntry,$/;"	f
mzZipEntryCount	minzip/Zip.h	/^INLINE unsigned int mzZipEntryCount(const ZipArchive* pArchive) {$/;"	f
name	edify/expr.h	/^    char* name;$/;"	m	struct:Expr
name	edify/expr.h	/^  const char* name;$/;"	m	struct:__anon9
name	mmcutils/mmcutils.c	/^    char *name;$/;"	m	struct:MmcPartition	file:
name	mtdutils/mtdutils.h	/^    char *name;$/;"	m	struct:MtdPartition
name	ui.c	/^static const struct { gr_surface* surface; const char *name; } BITMAPS[] = {$/;"	m	struct:__anon50	file:
nandroid_backup	nandroid.c	/^int nandroid_backup(const char* backup_path)$/;"	f
nandroid_backup_bitfield	nandroid.c	/^static int nandroid_backup_bitfield = 0;$/;"	v	file:
nandroid_backup_handler	nandroid.c	/^typedef int (*nandroid_backup_handler)(const char* backup_path, const char* backup_file_image, int callback);$/;"	t	file:
nandroid_backup_partition	nandroid.c	/^int nandroid_backup_partition(const char* backup_path, const char* root) {$/;"	f
nandroid_backup_partition_extended	nandroid.c	/^int nandroid_backup_partition_extended(const char* backup_path, const char* mount_point, int umount_when_finished) {$/;"	f
nandroid_callback	nandroid.c	/^static void nandroid_callback(const char* filename)$/;"	f	file:
nandroid_dedupe_gc	nandroid.c	/^void nandroid_dedupe_gc(const char* blob_dir) {$/;"	f
nandroid_files_count	nandroid.c	/^static int nandroid_files_count = 0;$/;"	v	file:
nandroid_files_total	nandroid.c	/^static int nandroid_files_total = 0;$/;"	v	file:
nandroid_force_backup_format	nandroid.c	/^void nandroid_force_backup_format(const char* fmt) {$/;"	f
nandroid_generate_timestamp_path	nandroid.c	/^void nandroid_generate_timestamp_path(const char* backup_path)$/;"	f
nandroid_main	nandroid.c	/^int nandroid_main(int argc, char** argv)$/;"	f
nandroid_restore	nandroid.c	/^int nandroid_restore(const char* backup_path, int restore_boot, int restore_system, int restore_data, int restore_cache, int restore_sdext, int restore_wimax)$/;"	f
nandroid_restore_handler	nandroid.c	/^typedef int (*nandroid_restore_handler)(const char* backup_file_image, const char* backup_path, int callback);$/;"	t	file:
nandroid_restore_partition	nandroid.c	/^int nandroid_restore_partition(const char* backup_path, const char* root) {$/;"	f
nandroid_restore_partition_extended	nandroid.c	/^int nandroid_restore_partition_extended(const char* backup_path, const char* mount_point, int umount_when_finished) {$/;"	f
nandroid_usage	nandroid.c	/^int nandroid_usage()$/;"	f
next	extendedcommands.c	/^    struct lun_node *next;$/;"	m	struct:lun_node	typeref:struct:lun_node::lun_node	file:
next	libcrecovery/popen.c	/^	struct pid *next;$/;"	m	struct:pid	typeref:struct:pid::pid	file:
next	minadbd/adb.h	/^    adisconnect*  next;$/;"	m	struct:adisconnect
next	minadbd/adb.h	/^    apacket *next;$/;"	m	struct:apacket
next	minadbd/adb.h	/^    asocket *next;$/;"	m	struct:asocket
next	minadbd/adb.h	/^    atransport *next;$/;"	m	struct:atransport
next	minadbd/fdevent.h	/^    fdevent *next;$/;"	m	struct:fdevent
next	minadbd/sysdeps.h	/^    fdevent *next;$/;"	m	struct:fdevent
notify	minadbd/usb_linux_client.c	/^    adb_cond_t notify;$/;"	m	struct:usb_handle	file:
now	ui.c	/^static double now() {$/;"	f	file:
numDeadEntries	minzip/Hash.h	/^    int         numDeadEntries;     \/* current #of tombstone entries *\/$/;"	m	struct:HashTable
numEntries	minzip/Hash.h	/^    int         numEntries;         \/* current #of "live" entries *\/$/;"	m	struct:HashTable
numEntries	minzip/Zip.h	/^    unsigned int numEntries;$/;"	m	struct:ZipArchive
num_volumes	roots.c	/^int num_volumes;$/;"	v
offs_prev	minelf/Retouch.c	/^static int32_t offs_prev;$/;"	v	file:
offset	minui/graphics.c	/^    unsigned offset[97];$/;"	m	struct:__anon20	file:
offset	minzip/Zip.h	/^    long         offset;$/;"	m	struct:ZipEntry
offtin	applypatch/bspatch.c	/^static off_t offtin(u_char *buf)$/;"	f	file:
offtout	applypatch/bsdiff.c	/^static void offtout(off_t x,u_char *buf)$/;"	f	file:
opaque	minadbd/adb.h	/^    void*         opaque;$/;"	m	struct:adisconnect
open	minadbd/sysdeps.h	162;"	d
open	minadbd/sysdeps.h	348;"	d
open	minadbd/sysdeps.h	349;"	d
out	make-overlay.py	/^  out = Image.new("RGB", (w, h))$/;"	v
outfile	tools/ota/convert-to-bmp.py	/^outfile = sys.argv[2]$/;"	v
output_manifest	dedupe/dedupe.c	/^    FILE *output_manifest;$/;"	m	struct:DEDUPE_STORE_CONTEXT	file:
output_thread	minadbd/transport.c	/^static void *output_thread(void *_t)$/;"	f	file:
pEntries	minzip/Hash.h	/^    HashEntry*  pEntries;           \/* array on heap *\/$/;"	m	struct:HashTable
pEntries	minzip/Zip.h	/^    ZipEntry*   pEntries;$/;"	m	struct:ZipArchive
pHash	minzip/Zip.h	/^    HashTable*  pHash;          \/\/ maps file name to ZipEntry$/;"	m	struct:ZipArchive
pHashTable	minzip/Hash.h	/^    HashTable*  pHashTable;$/;"	m	struct:HashIter
package_zip	updater/updater.h	/^    ZipArchive* package_zip;$/;"	m	struct:__anon51
parseZipArchive	minzip/Zip.c	/^static bool parseZipArchive(ZipArchive* pArchive, const MemMapping* pMap)$/;"	f	file:
parse_banner	minadbd/adb.c	/^void parse_banner(char *banner, atransport *t)$/;"	f
parse_options	roots.c	/^static int parse_options(char* options, Volume* volume) {$/;"	f	file:
partition	mtdutils/bml_over_mtd.c	/^	const MtdPartition *partition;$/;"	m	struct:BmlOverMtdReadContext	file:
partition	mtdutils/bml_over_mtd.c	/^	const MtdPartition *partition;$/;"	m	struct:BmlOverMtdWriteContext	file:
partition	mtdutils/mtdutils.c	/^    const MtdPartition *partition;$/;"	m	struct:MtdReadContext	file:
partition	mtdutils/mtdutils.c	/^    const MtdPartition *partition;$/;"	m	struct:MtdWriteContext	file:
partition_count	mmcutils/mmcutils.c	/^    int partition_count;$/;"	m	struct:__anon46	file:
partition_count	mtdutils/mtdutils.c	/^    int partition_count;$/;"	m	struct:__anon49	file:
partition_sdcard	extendedcommands.c	/^static void partition_sdcard(const char* volume) {$/;"	f	file:
partitions	mmcutils/mmcutils.c	/^    MmcPartition *partitions;$/;"	m	struct:__anon46	file:
partitions	mtdutils/mtdutils.c	/^    MtdPartition *partitions;$/;"	m	struct:__anon49	file:
partitions_allocd	mmcutils/mmcutils.c	/^    int partitions_allocd;$/;"	m	struct:__anon46	file:
partitions_allocd	mtdutils/mtdutils.c	/^    int partitions_allocd;$/;"	m	struct:__anon49	file:
patch_and_apply	applypatch/imgdiff_test.sh	/^patch_and_apply() {$/;"	f
patch_filename	applypatch/applypatch.h	/^  const char* patch_filename;$/;"	m	struct:_Patch
peer	minadbd/adb.h	/^    asocket *peer;$/;"	m	struct:asocket
pid	libcrecovery/popen.c	/^	pid_t pid;$/;"	m	struct:pid	file:
pid	libcrecovery/popen.c	/^static struct pid {$/;"	s	file:
pidlist	libcrecovery/popen.c	/^} *pidlist;$/;"	v	typeref:struct:pid	file:
pkt_first	minadbd/adb.h	/^    apacket *pkt_first;$/;"	m	struct:asocket
pkt_last	minadbd/adb.h	/^    apacket *pkt_last;$/;"	m	struct:asocket
pos	applypatch/applypatch.c	/^    ssize_t pos;$/;"	m	struct:__anon1	file:
pow	minui/resources.c	/^double pow(double x, double y) {$/;"	f
poweroff	recovery.c	/^static int poweroff = 0;$/;"	v	file:
prelink_info_t	minelf/Retouch.c	/^} prelink_info_t __attribute__((packed));$/;"	t	typeref:struct:__anon18	file:
prepend_title	recovery.c	/^prepend_title(char** headers) {$/;"	f	file:
prev	minadbd/adb.h	/^    adisconnect*  prev;$/;"	m	struct:adisconnect
prev	minadbd/adb.h	/^    asocket *prev;$/;"	m	struct:asocket
prev	minadbd/adb.h	/^    atransport *prev;$/;"	m	struct:atransport
prev	minadbd/fdevent.h	/^    fdevent *prev;$/;"	m	struct:fdevent
prev	minadbd/sysdeps.h	/^    fdevent *prev;$/;"	m	struct:fdevent
print_and_error	nandroid.c	/^static int print_and_error(const char* message) {$/;"	f	file:
print_fb_var_screeninfo	minui/graphics.c	/^static void print_fb_var_screeninfo()$/;"	f	file:
print_packet	minadbd/adb.c	/^void print_packet(const char *label, apacket *p)$/;"	f
print_packet	minadbd/adb.h	358;"	d
print_property	recovery.c	/^print_property(const char *key, const char *name, void *cookie) {$/;"	f	file:
print_stat	dedupe/dedupe.c	/^void print_stat(struct DEDUPE_STORE_CONTEXT *context, char type, struct stat st, const char *f) {$/;"	f
processDeflatedEntry	minzip/Zip.c	/^static bool processDeflatedEntry(const ZipArchive *pArchive,$/;"	f	file:
processStoredEntry	minzip/Zip.c	/^static bool processStoredEntry(const ZipArchive *pArchive,$/;"	f	file:
process_volumes	extendedcommands.c	/^void process_volumes() {$/;"	f
product	minadbd/adb.h	/^    char *product;$/;"	m	struct:atransport
progress_thread	ui.c	/^static void *progress_thread(void *cookie)$/;"	f	file:
prompt_and_wait	recovery.c	/^prompt_and_wait() {$/;"	f	file:
ptr	minadbd/adb.h	/^    unsigned char *ptr;$/;"	m	struct:apacket
put_apacket	minadbd/adb.c	/^void put_apacket(apacket *p)$/;"	f
qsufsort	applypatch/bsdiff.c	/^static void qsufsort(off_t *I,off_t *V,u_char *old,off_t oldsize)$/;"	f	file:
read	minadbd/sysdeps.h	131;"	d
read	minadbd/sysdeps.h	132;"	d
read	minadbd/sysdeps.h	371;"	d
read	minadbd/sysdeps.h	372;"	d
read1	minzip/Bits.h	/^INLINE unsigned char read1(unsigned const char** ppSrc)$/;"	f
read2BE	minzip/Bits.h	/^INLINE unsigned short read2BE(unsigned char const** ppSrc)$/;"	f
read2LE	minzip/Bits.h	/^INLINE unsigned short read2LE(unsigned char const** ppSrc)$/;"	f
read4BE	minzip/Bits.h	/^INLINE unsigned int read4BE(unsigned char const** ppSrc)$/;"	f
read4LE	minzip/Bits.h	/^INLINE unsigned int read4LE(unsigned char const** ppSrc)$/;"	f
read8BE	minzip/Bits.h	/^INLINE unsigned long long read8BE(unsigned char const** ppSrc)$/;"	f
read8LE	minzip/Bits.h	/^INLINE unsigned long long read8LE(unsigned char const** ppSrc)$/;"	f
readNewUtf8String	minzip/Bits.h	/^INLINE char* readNewUtf8String(unsigned char const** ppSrc, size_t* pLength)$/;"	f
readUtf8String	minzip/Bits.h	/^INLINE int readUtf8String(unsigned char const** ppSrc, char* buf, size_t bufLen)$/;"	f
read_block	mtdutils/mtdutils.c	/^static int read_block(const MtdPartition *partition, int fd, char *data)$/;"	f	file:
read_fds	minadbd/fdevent.c	/^static fd_set read_fds;$/;"	v	file:
read_from_remote	minadbd/adb.h	/^    int (*read_from_remote)(apacket *p, atransport *t);$/;"	m	struct:atransport
read_packet	minadbd/transport.c	/^read_packet(int  fd, const char* name, apacket** ppacket)$/;"	f	file:
readx	minadbd/transport.c	/^int readx(int fd, void *ptr, size_t len)$/;"	f
ready	minadbd/adb.h	/^    void (*ready)(asocket *s);$/;"	m	struct:asocket
really_install_package	install.c	/^really_install_package(const char *path)$/;"	f	file:
reboot_multi_system	recovery.c	/^reboot_multi_system() {$/;"	f
recovery	bootloader.h	/^    char recovery[1024];$/;"	m	struct:bootloader_message
recursive_list_dir	dedupe/dedupe.c	/^static void recursive_list_dir(char* d, struct array *arr) {$/;"	f	file:
ref_count	minadbd/adb.h	/^    int ref_count;$/;"	m	struct:atransport
refresh_default_backup_handler	nandroid.c	/^static void refresh_default_backup_handler() {$/;"	f	file:
register_socket_transport	minadbd/transport.c	/^void register_socket_transport(int s, const char *serial, int port, int local)$/;"	f
register_transport	minadbd/transport.c	/^static void register_transport(atransport *transport)$/;"	f	file:
register_usb_transport	minadbd/transport.c	/^void register_usb_transport(usb_handle *usb, const char *serial, unsigned writeable)$/;"	f
rel_sum	ui.c	/^static int rel_sum = 0;$/;"	v	file:
remember_firmware_update	firmware.c	/^int remember_firmware_update(const char *type, const char *data, int length) {$/;"	f
remote_close	minadbd/transport_usb.c	/^static void remote_close(atransport *t)$/;"	f	file:
remote_kick	minadbd/transport_usb.c	/^static void remote_kick(atransport *t)$/;"	f	file:
remote_read	minadbd/transport_usb.c	/^static int remote_read(apacket *p, atransport *t)$/;"	f	file:
remote_socket_close	minadbd/sockets.c	/^static void remote_socket_close(asocket *s)$/;"	f	file:
remote_socket_disconnect	minadbd/sockets.c	/^static void remote_socket_disconnect(void*  _s, atransport*  t)$/;"	f	file:
remote_socket_enqueue	minadbd/sockets.c	/^static int remote_socket_enqueue(asocket *s, apacket *p)$/;"	f	file:
remote_socket_ready	minadbd/sockets.c	/^static void remote_socket_ready(asocket *s)$/;"	f	file:
remote_write	minadbd/transport_usb.c	/^static int remote_write(apacket *p, atransport *t)$/;"	f	file:
remount_read_only	mounts.c	/^remount_read_only(const MountedVolume* volume)$/;"	f
remove_socket	minadbd/sockets.c	/^void remove_socket(asocket *s)$/;"	f
remove_tag	tools/ota/add-property-tag.c	/^int remove_tag(char *line, const char *tag) {$/;"	f
remove_transport	minadbd/transport.c	/^static void remove_transport(atransport *transport)$/;"	f	file:
remove_transport_disconnect	minadbd/transport.c	/^void remove_transport_disconnect(atransport*  t, adisconnect*  dis)$/;"	f
res_create_surface	minui/resources.c	/^int res_create_surface(const char* name, gr_surface* pSurface) {$/;"	f
res_free_surface	minui/resources.c	/^void res_free_surface(gr_surface surface) {$/;"	f
resizeHash	minzip/Hash.c	/^static bool resizeHash(HashTable* pHashTable, int newSize)$/;"	f	file:
restore_internal	bmlutils/bmlutils.c	/^static int restore_internal(const char* bml, const char* filename)$/;"	f	file:
restore_raw_partition	flashutils/flashutils.c	/^int restore_raw_partition(const char* partitionType, const char *partition, const char *filename)$/;"	f
retouch_info_t	minelf/Retouch.h	/^} retouch_info_t __attribute__((packed));$/;"	t	typeref:struct:__anon17
retouch_mask_data	minelf/Retouch.c	/^int retouch_mask_data(uint8_t *binary_object,$/;"	f
roundUpPower2	minzip/Hash.c	/^unsigned int roundUpPower2(unsigned int val)$/;"	f
run_and_remove_extendedcommand	edifyscripting.c	/^int run_and_remove_extendedcommand()$/;"	f
run_command	applypatch/applypatch.sh	/^run_command() {$/;"	f
run_command	applypatch/imgdiff_test.sh	/^run_command() {$/;"	f
run_command	verifier_test.sh	/^run_command() {$/;"	f
run_dedupe_gc	extendedcommands.c	/^static void run_dedupe_gc(const char* other_sd) {$/;"	f	file:
run_exec_process	mmcutils/mmcutils.c	/^run_exec_process ( char **argv) {$/;"	f
run_script	edifyscripting.c	/^int run_script(char* filename)$/;"	f
run_script_from_buffer	edifyscripting.c	/^int run_script_from_buffer(char* script_data, int script_len, char* filename)$/;"	f
run_transport_disconnects	minadbd/transport.c	/^run_transport_disconnects(atransport*  t)$/;"	f
rundata	minui/courier_extended_15x24.h	/^  unsigned char rundata[];$/;"	m	struct:__anon27
rundata	minui/font_10x10.h	/^	unsigned char rundata[];$/;"	m	struct:__anon28
rundata	minui/font_10x18.h	/^  unsigned char rundata[];$/;"	m	struct:__anon23
rundata	minui/font_12x12.h	/^	unsigned char rundata[];$/;"	m	struct:__anon24
rundata	minui/font_14x14.h	/^	unsigned char rundata[];$/;"	m	struct:__anon33
rundata	minui/font_16x16.h	/^	unsigned char rundata[];$/;"	m	struct:__anon37
rundata	minui/font_18x18.h	/^	unsigned char rundata[];$/;"	m	struct:__anon19
rundata	minui/font_20x20.h	/^	unsigned char rundata[];$/;"	m	struct:__anon34
rundata	minui/font_24x24.h	/^	unsigned char rundata[];$/;"	m	struct:__anon36
rundata	minui/font_28x28.h	/^	unsigned char rundata[];$/;"	m	struct:__anon31
rundata	minui/font_32x32.h	/^	unsigned char rundata[];$/;"	m	struct:__anon25
rundata	minui/font_36x36.h	/^	unsigned char rundata[];$/;"	m	struct:__anon22
rundata	minui/font_40x40.h	/^	unsigned char rundata[];$/;"	m	struct:__anon21
rundata	minui/font_50x50.h	/^	unsigned char rundata[];$/;"	m	struct:__anon26
rundata	minui/font_60x60.h	/^	unsigned char rundata[];$/;"	m	struct:__anon35
rundata	minui/font_7x16.h	/^  unsigned char rundata[];$/;"	m	struct:__anon38
rundata	minui/roboto_10x18.h	/^  unsigned char rundata[];$/;"	m	struct:__anon29
rundata	minui/roboto_15x24.h	/^  unsigned char rundata[];$/;"	m	struct:__anon32
rundata	minui/roboto_23x41.h	/^  unsigned char rundata[];$/;"	m	struct:__anon30
scan_mounted_volumes	mounts.c	/^scan_mounted_volumes()$/;"	f
scan_partition	mtdutils/bml_over_mtd.c	/^static int scan_partition(const MtdPartition* pPart)$/;"	f	file:
script	edify/expr.h	/^    char* script;$/;"	m	struct:__anon7
script_assert_enabled	extendedcommands.c	/^int script_assert_enabled = 1;$/;"	v
search	applypatch/bsdiff.c	/^static off_t search(off_t *I,u_char *old,off_t oldsize,$/;"	f	file:
sehandle	recovery.c	/^struct selabel_handle *sehandle = NULL;$/;"	v	typeref:struct:selabel_handle
sehandle	updater/updater.c	/^struct selabel_handle *sehandle;$/;"	v	typeref:struct:selabel_handle
select_n	minadbd/fdevent.c	/^static int select_n = 0;$/;"	v	file:
send_close	minadbd/adb.c	/^static void send_close(unsigned local, unsigned remote, atransport *t)$/;"	f	file:
send_connect	minadbd/adb.c	/^static void send_connect(atransport *t)$/;"	f	file:
send_packet	minadbd/transport.c	/^void send_packet(apacket *p, atransport *t)$/;"	f
send_ready	minadbd/adb.c	/^static void send_ready(unsigned local, unsigned remote, atransport *t)$/;"	f	file:
sendfailmsg	minadbd/sockets.c	/^int sendfailmsg(int fd, const char *reason)$/;"	f
serial	minadbd/adb.h	/^    char *serial;$/;"	m	struct:atransport
service_bootstrap_func	minadbd/services.c	/^void *service_bootstrap_func(void *x)$/;"	f
service_to_fd	minadbd/services.c	/^int service_to_fd(const char *name)$/;"	f
set1	minzip/Bits.h	/^INLINE void set1(unsigned char* buf, unsigned char val)$/;"	f
set2BE	minzip/Bits.h	/^INLINE void set2BE(unsigned char* buf, unsigned short val)$/;"	f
set2LE	minzip/Bits.h	/^INLINE void set2LE(unsigned char* buf, unsigned short val)$/;"	f
set4BE	minzip/Bits.h	/^INLINE void set4BE(unsigned char* buf, unsigned int val)$/;"	f
set4LE	minzip/Bits.h	/^INLINE void set4LE(unsigned char* buf, unsigned int val)$/;"	f
set8BE	minzip/Bits.h	/^INLINE void set8BE(unsigned char* buf, unsigned long long val)$/;"	f
set8LE	minzip/Bits.h	/^INLINE void set8LE(unsigned char* buf, unsigned long long val)$/;"	f
setUtf8String	minzip/Bits.h	/^INLINE void setUtf8String(unsigned char* buf, const unsigned char* str)$/;"	f
set_active_framebuffer	minui/graphics.c	/^static void set_active_framebuffer(unsigned n)$/;"	f	file:
set_bootloader_message	bootloader.c	/^int set_bootloader_message(const struct bootloader_message *in) {$/;"	f
set_bootloader_message_block	bootloader.c	/^static int set_bootloader_message_block(const struct bootloader_message *in,$/;"	f	file:
set_bootloader_message_mtd	bootloader.c	/^static int set_bootloader_message_mtd(const struct bootloader_message *in,$/;"	f	file:
set_reboot_message	bootloader.c	/^int set_reboot_message(int system_id) {$/;"	f
set_reboot_message_block	bootloader.c	/^static int set_reboot_message_block(int system_id, const Volume* v) {$/;"	f	file:
set_reboot_message_mtd	bootloader.c	/^static int set_reboot_message_mtd(int system_id, const Volume* v) {$/;"	f	file:
set_sdcard_update_bootloader_message	recovery.c	/^set_sdcard_update_bootloader_message() {$/;"	f
set_usb_driver	adb_install.c	/^set_usb_driver(int enabled) {$/;"	f	file:
setprop_main	setprop.c	/^int setprop_main(int argc, char *argv[])$/;"	f
setup_data_media	roots.c	/^void setup_data_media() {$/;"	f
sfd	minadbd/adb.h	/^    int sfd;$/;"	m	struct:atransport
sha1	applypatch/applypatch.h	/^  uint8_t sha1[SHA_DIGEST_SIZE];$/;"	m	struct:_FileContents
sha1	applypatch/applypatch.h	/^  uint8_t sha1[SHA_DIGEST_SIZE];$/;"	m	struct:_Patch
sha1	applypatch/applypatch.sh	/^sha1() {$/;"	f
sha1	applypatch/imgdiff_test.sh	/^sha1() {$/;"	f
shift	minui/graphics.c	/^	int     shift;$/;"	m	struct:utf8_table	file:
should_tag	tools/ota/add-property-tag.c	/^int should_tag(const char *line, const char *propname) {$/;"	f
show_advanced_menu	extendedcommands.c	/^void show_advanced_menu()$/;"	f
show_choose_zip_menu	extendedcommands.c	/^void show_choose_zip_menu(const char *mount_point)$/;"	f
show_install_update_menu	extendedcommands.c	/^void show_install_update_menu()$/;"	f
show_menu	ui.c	/^static int show_menu = 0;$/;"	v	file:
show_mount_usb_storage_menu	extendedcommands.c	/^void show_mount_usb_storage_menu()$/;"	f
show_nandroid_advanced_restore_menu	extendedcommands.c	/^void show_nandroid_advanced_restore_menu(const char* path)$/;"	f
show_nandroid_delete_menu	extendedcommands.c	/^void show_nandroid_delete_menu(const char* path)$/;"	f
show_nandroid_menu	extendedcommands.c	/^void show_nandroid_menu()$/;"	f
show_nandroid_restore_menu	extendedcommands.c	/^void show_nandroid_restore_menu(const char* path)$/;"	f
show_partition_menu	extendedcommands.c	/^void show_partition_menu()$/;"	f
show_text	ui.c	/^static int show_text = 0;$/;"	v	file:
show_text_ever	ui.c	/^static int show_text_ever = 0;   \/\/ has show_text ever been 1?$/;"	v	file:
shutdown	minadbd/sysdeps.h	355;"	d
shutdown	minadbd/sysdeps.h	356;"	d
sideload_service	minadbd/services.c	/^static void sideload_service(int s, void *cookie)$/;"	f	file:
signature_check_enabled	extendedcommands.c	/^int signature_check_enabled = 1;$/;"	v
size	applypatch/applypatch.c	/^    ssize_t size;$/;"	m	struct:__anon1	file:
size	applypatch/applypatch.h	/^  ssize_t size;$/;"	m	struct:_FileContents
size	applypatch/imgdiff_test.sh	/^size() {$/;"	f
size	bootloader.c	/^    unsigned size;$/;"	m	struct:update_header	file:
size	dedupe/dedupe.c	/^    int size;$/;"	m	struct:array	file:
size	edify/expr.h	/^    ssize_t size;$/;"	m	struct:__anon8
size	mtdutils/mtdutils.h	/^    unsigned int size;$/;"	m	struct:MtdPartition
size_array	applypatch/applypatch.c	/^static size_t* size_array;$/;"	v	file:
skipUtf8String	minzip/Bits.h	/^INLINE void skipUtf8String(unsigned char const** ppSrc)$/;"	f
skip_host_serial	minadbd/sockets.c	/^char *skip_host_serial(char *service) {$/;"	f
smart_socket_action	minadbd/sockets.c	/^void smart_socket_action(asocket *s, const char *act)$/;"	f
smart_socket_close	minadbd/sockets.c	/^static void smart_socket_close(asocket *s)$/;"	f	file:
smart_socket_enqueue	minadbd/sockets.c	/^static int smart_socket_enqueue(asocket *s, apacket *p)$/;"	f	file:
smart_socket_ready	minadbd/sockets.c	/^static void smart_socket_ready(asocket *s)$/;"	f	file:
socket	minadbd/sockets.c	/^    asocket      socket;$/;"	m	struct:aremotesocket	file:
socket_list_lock	minadbd/sockets.c	/^ADB_MUTEX_DEFINE( socket_list_lock );$/;"	v
socketpair	minadbd/sysdeps.h	458;"	d
socketpair	minadbd/sysdeps.h	459;"	d
source_len	applypatch/imgdiff.c	/^  size_t source_len;$/;"	m	struct:__anon2	file:
source_start	applypatch/imgdiff.c	/^  size_t source_start;$/;"	m	struct:__anon2	file:
source_uncompressed_len	applypatch/imgdiff.c	/^  size_t source_uncompressed_len;$/;"	m	struct:__anon2	file:
split	applypatch/bsdiff.c	/^static void split(off_t *I,off_t *V,off_t start,off_t len,off_t h)$/;"	f	file:
st	applypatch/applypatch.h	/^  struct stat st;$/;"	m	struct:_FileContents	typeref:struct:_FileContents::stat
start	applypatch/imgdiff.c	/^  size_t start;         \/\/ offset of chunk in original image file$/;"	m	struct:__anon2	file:
start	edify/expr.h	/^    int start, end;$/;"	m	struct:Expr
start	edify/yydefs.h	/^    int start, end;$/;"	m	struct:__anon10
state	minadbd/fdevent.h	/^    unsigned short state;$/;"	m	struct:fdevent
state	minadbd/sysdeps.h	/^    unsigned short state;$/;"	m	struct:fdevent
status	bootloader.h	/^    char status[32];$/;"	m	struct:bootloader_message
stinfo	minadbd/services.c	/^struct stinfo {$/;"	s	file:
stinfo	minadbd/services.c	/^typedef struct stinfo stinfo;$/;"	t	typeref:struct:stinfo	file:
stop_adbd	adb_install.c	/^stop_adbd() {$/;"	f	file:
store_dir	dedupe/dedupe.c	/^static int store_dir(struct DEDUPE_STORE_CONTEXT *context, struct stat st, const char* d) {$/;"	f	file:
store_file	dedupe/dedupe.c	/^static int store_file(struct DEDUPE_STORE_CONTEXT *context, struct stat st, const char* f) {$/;"	f	file:
store_link	dedupe/dedupe.c	/^static int store_link(struct DEDUPE_STORE_CONTEXT *context, struct stat st, const char* l) {$/;"	f	file:
store_st	dedupe/dedupe.c	/^static int store_st(struct DEDUPE_STORE_CONTEXT *context, struct stat st, const char* s) {$/;"	f	file:
stored	mtdutils/bml_over_mtd.c	/^	size_t stored;$/;"	m	struct:BmlOverMtdWriteContext	file:
stored	mtdutils/mtdutils.c	/^    size_t stored;$/;"	m	struct:MtdWriteContext	file:
str	minzip/Zip.h	/^    const char *str;$/;"	m	struct:__anon43
strategy	applypatch/imgdiff.c	/^  int level, method, windowBits, memLevel, strategy;$/;"	m	struct:__anon2	file:
string_compare	dedupe/dedupe.c	/^static int string_compare(const void* a, const void* b) {$/;"	f	file:
surface	ui.c	/^static const struct { gr_surface* surface; const char *name; } BITMAPS[] = {$/;"	m	struct:__anon50	file:
sync_token	minadbd/adb.h	/^    unsigned sync_token;$/;"	m	struct:atransport
sysCopyMap	minzip/SysUtil.h	/^INLINE void sysCopyMap(MemMapping* dst, const MemMapping* src) {$/;"	f
sysCreateAnonShmem	minzip/SysUtil.c	/^static void* sysCreateAnonShmem(size_t length)$/;"	f	file:
sysLoadFileInShmem	minzip/SysUtil.c	/^int sysLoadFileInShmem(int fd, MemMapping* pMap)$/;"	f
sysMapFileInShmem	minzip/SysUtil.c	/^int sysMapFileInShmem(int fd, MemMapping* pMap)$/;"	f
sysMapFileSegmentInShmem	minzip/SysUtil.c	/^int sysMapFileSegmentInShmem(int fd, off_t start, long length,$/;"	f
sysReleaseShmem	minzip/SysUtil.c	/^void sysReleaseShmem(MemMapping* pMap)$/;"	f
t	make-overlay.py	/^      t = top.getpixel((i+minmini, j+minminj))$/;"	v
t	make-overlay.py	/^      t = top.getpixel((i,j))$/;"	v
tableSize	minzip/Hash.h	/^    int         tableSize;          \/* must be power of 2 *\/$/;"	m	struct:HashTable
tag	minelf/Retouch.c	/^    char tag[4]; \/* 'P', 'R', 'E', ' ' *\/$/;"	m	struct:__anon18	file:
tag	minelf/Retouch.h	/^  char tag[8];        \/* "RETOUCH ", not zero-terminated *\/$/;"	m	struct:__anon17
tar_compress_wrapper	nandroid.c	/^static int tar_compress_wrapper(const char* backup_path, const char* backup_file_image, int callback) {$/;"	f	file:
tar_extract_wrapper	nandroid.c	/^static int tar_extract_wrapper(const char* backup_file_image, const char* backup_path, int callback) {$/;"	f	file:
targetDir	minzip/Zip.c	/^    const char *targetDir;$/;"	m	struct:__anon42	file:
targetDirLen	minzip/Zip.c	/^    int targetDirLen;$/;"	m	struct:__anon42	file:
targetEntryPath	minzip/Zip.c	/^static const char *targetEntryPath(MzPathHelper *helper, ZipEntry *pEntry)$/;"	f	file:
test	edify/main.c	/^int test() {$/;"	f
test_bit	minui/events.c	34;"	d	file:
test_key	verifier_test.c	/^RSAPublicKey test_key =$/;"	v
testname	applypatch/applypatch.sh	/^testname() {$/;"	f
testname	applypatch/imgdiff_test.sh	/^testname() {$/;"	f
testname	verifier_test.sh	/^testname() {$/;"	f
text	ui.c	/^static char text[MAX_ROWS][MAX_COLS];$/;"	v	file:
text_col	ui.c	/^static int text_col = 0, text_row = 0, text_top = 0;$/;"	v	file:
text_cols	ui.c	/^static int text_cols = 0, text_rows = 0;$/;"	v	file:
text_row	ui.c	/^static int text_col = 0, text_row = 0, text_top = 0;$/;"	v	file:
text_rows	ui.c	/^static int text_cols = 0, text_rows = 0;$/;"	v	file:
text_top	ui.c	/^static int text_col = 0, text_row = 0, text_top = 0;$/;"	v	file:
texture	minui/graphics.c	/^    GGLSurface texture;$/;"	m	struct:__anon20	file:
the_flash_type	flashutils/flashutils.c	/^int the_flash_type = UNKNOWN;$/;"	v
tid	minadbd/sysdeps.h	/^typedef struct { unsigned  tid; }  adb_thread_t;$/;"	m	struct:__anon16
tmplog_offset	recovery.c	/^static long tmplog_offset = 0;$/;"	v	file:
tmsg	minadbd/transport.c	/^struct tmsg$/;"	s	file:
tmsg	minadbd/transport.c	/^typedef struct tmsg tmsg;$/;"	t	typeref:struct:tmsg	file:
toggle_signature_check	extendedcommands.c	/^toggle_signature_check()$/;"	f
tokenize	dedupe/dedupe.c	/^static char* tokenize(char *out, const char* line, const char sep) {$/;"	f	file:
top	make-overlay.py	/^  top = Image.open(top_name)$/;"	v
transport	minadbd/adb.h	/^    atransport *transport;$/;"	m	struct:asocket
transport	minadbd/transport.c	/^    atransport *transport;$/;"	m	struct:tmsg	file:
transport_fde	minadbd/adb.h	/^    fdevent transport_fde;$/;"	m	struct:atransport
transport_list	minadbd/transport.c	/^static atransport transport_list = {$/;"	v	file:
transport_lock	minadbd/transport.c	/^ADB_MUTEX_DEFINE( transport_lock );$/;"	v
transport_read_action	minadbd/transport.c	/^transport_read_action(int  fd, struct tmsg*  m)$/;"	f	file:
transport_registration_fde	minadbd/transport.c	/^static fdevent transport_registration_fde;$/;"	v	file:
transport_registration_func	minadbd/transport.c	/^static void transport_registration_func(int _fd, unsigned ev, void *data)$/;"	f	file:
transport_registration_recv	minadbd/transport.c	/^static int transport_registration_recv = -1;$/;"	v	file:
transport_registration_send	minadbd/transport.c	/^static int transport_registration_send = -1;$/;"	v	file:
transport_socket	minadbd/adb.h	/^    int transport_socket;$/;"	m	struct:atransport
transport_socket_events	minadbd/transport.c	/^static void transport_socket_events(int fd, unsigned events, void *_t)$/;"	f	file:
transport_type	minadbd/adb.h	/^typedef enum transport_type {$/;"	g
transport_type	minadbd/adb.h	/^} transport_type;$/;"	t	typeref:enum:transport_type
transport_unref	minadbd/transport.c	/^static void transport_unref(atransport *t)$/;"	f	file:
transport_unref_locked	minadbd/transport.c	/^static void transport_unref_locked(atransport *t)$/;"	f	file:
transport_write_action	minadbd/transport.c	/^transport_write_action(int  fd, struct tmsg*  m)$/;"	f	file:
true	minelf/Retouch.c	33;"	d	file:
try_mount	roots.c	/^int try_mount(const char* device, const char* mount_point, const char* fs_type, const char* fs_options) {$/;"	f
try_update_binary	install.c	/^try_update_binary(const char *path, ZipArchive *zip) {$/;"	f	file:
txt	extendedcommands.c	/^    char txt[255];$/;"	m	struct:__anon12	file:
type	applypatch/imgdiff.c	/^  int type;             \/\/ CHUNK_NORMAL, CHUNK_DEFLATE$/;"	m	struct:__anon2	file:
type	edify/expr.h	/^    int type;$/;"	m	struct:__anon8
type	minadbd/adb.h	/^    transport_type type;$/;"	m	struct:atransport
ui_clear_key_queue	ui.c	/^void ui_clear_key_queue() {$/;"	f
ui_copy_image	ui.c	/^char *ui_copy_image(int icon, int *width, int *height, int *bpp) {$/;"	f
ui_delete_line	ui.c	/^void ui_delete_line() {$/;"	f
ui_end_menu	ui.c	/^void ui_end_menu() {$/;"	f
ui_get_selected_item	ui.c	/^int ui_get_selected_item() {$/;"	f
ui_get_showing_back_button	ui.c	/^int ui_get_showing_back_button() {$/;"	f
ui_get_text_cols	ui.c	/^int ui_get_text_cols() {$/;"	f
ui_handle_key	ui.c	/^int ui_handle_key(int key, int visible) {$/;"	f
ui_has_initialized	ui.c	/^static int ui_has_initialized = 0;$/;"	v	file:
ui_increment_frame	ui.c	/^void ui_increment_frame() {$/;"	f
ui_init	ui.c	/^void ui_init(void)$/;"	f
ui_is_showing_back_button	ui.c	/^int ui_is_showing_back_button() {$/;"	f
ui_key_pressed	ui.c	/^int ui_key_pressed(int key)$/;"	f
ui_log_stdout	ui.c	/^static int ui_log_stdout = 1;$/;"	v	file:
ui_menu_level	recovery.c	/^int ui_menu_level = 1;$/;"	v
ui_menu_select	ui.c	/^int ui_menu_select(int sel) {$/;"	f
ui_nice	ui.c	/^static int ui_nice = 0;$/;"	v	file:
ui_nice_print	common.h	42;"	d
ui_niced	ui.c	/^static int ui_niced = 0;$/;"	v	file:
ui_parameters	ui.c	/^UIParameters ui_parameters = {$/;"	v
ui_print	ui.c	/^void ui_print(const char *fmt, ...)$/;"	f
ui_print	verifier_test.c	/^void ui_print(const char* fmt, ...) {$/;"	f
ui_printlogtail	ui.c	/^void ui_printlogtail(int nb_lines) {$/;"	f
ui_reset_progress	ui.c	/^void ui_reset_progress()$/;"	f
ui_root_menu	recovery.c	/^int ui_root_menu = 0;$/;"	v
ui_set_background	ui.c	/^void ui_set_background(int icon)$/;"	f
ui_set_nice	ui.c	/^void ui_set_nice(int enabled) {$/;"	f
ui_set_progress	ui.c	/^void ui_set_progress(float fraction)$/;"	f
ui_set_progress	verifier_test.c	/^void ui_set_progress(float fraction) {$/;"	f
ui_set_show_text	ui.c	/^void ui_set_show_text(int value) {$/;"	f
ui_set_showing_back_button	ui.c	/^void ui_set_showing_back_button(int showBackButton) {$/;"	f
ui_show_indeterminate_progress	ui.c	/^void ui_show_indeterminate_progress()$/;"	f
ui_show_progress	ui.c	/^void ui_show_progress(float portion, int seconds)$/;"	f
ui_show_text	ui.c	/^void ui_show_text(int visible)$/;"	f
ui_start_menu	ui.c	/^int ui_start_menu(char** headers, char** items, int initial_selection) {$/;"	f
ui_text_ever_visible	ui.c	/^int ui_text_ever_visible()$/;"	f
ui_text_visible	ui.c	/^int ui_text_visible()$/;"	f
ui_wait_key	ui.c	/^int ui_wait_key()$/;"	f
ui_wait_key_with_repeat	ui.c	/^int ui_wait_key_with_repeat()$/;"	f
ui_was_niced	ui.c	/^int ui_was_niced() {$/;"	f
uncompLen	minzip/Zip.h	/^    long         uncompLen;$/;"	m	struct:ZipEntry
uncomp_len	applypatch/imgdiff.c	/^  int uncomp_len;$/;"	m	struct:__anon3	file:
unhex	minadbd/sockets.c	/^unsigned unhex(unsigned char *s, int len)$/;"	f
unicodemap	minui/font_10x10.h	/^	unsigned unicodemap[7540];$/;"	m	struct:__anon28
unicodemap	minui/font_12x12.h	/^	unsigned unicodemap[7540];$/;"	m	struct:__anon24
unicodemap	minui/font_14x14.h	/^	unsigned unicodemap[7540];$/;"	m	struct:__anon33
unicodemap	minui/font_16x16.h	/^	unsigned unicodemap[7540];$/;"	m	struct:__anon37
unicodemap	minui/font_18x18.h	/^	unsigned unicodemap[7540];$/;"	m	struct:__anon19
unicodemap	minui/font_20x20.h	/^	unsigned unicodemap[7540];$/;"	m	struct:__anon34
unicodemap	minui/font_24x24.h	/^	unsigned unicodemap[7540];$/;"	m	struct:__anon36
unicodemap	minui/font_28x28.h	/^	unsigned unicodemap[7540];$/;"	m	struct:__anon31
unicodemap	minui/font_32x32.h	/^	unsigned unicodemap[7540];$/;"	m	struct:__anon25
unicodemap	minui/font_36x36.h	/^	unsigned unicodemap[7540];$/;"	m	struct:__anon22
unicodemap	minui/font_40x40.h	/^	unsigned unicodemap[7540];$/;"	m	struct:__anon21
unicodemap	minui/font_50x50.h	/^	unsigned unicodemap[7540];$/;"	m	struct:__anon26
unicodemap	minui/font_60x60.h	/^	unsigned unicodemap[7540];$/;"	m	struct:__anon35
unicodemap	minui/graphics.c	/^    unsigned *unicodemap;$/;"	m	struct:__anon20	file:
unix_close	minadbd/sysdeps.h	/^static __inline__ int  unix_close(int fd)$/;"	f
unix_close	minadbd/sysdeps.h	411;"	d
unix_open	minadbd/sysdeps.h	/^static __inline__ int  unix_open(const char*  path, int options,...)$/;"	f
unix_read	minadbd/sysdeps.h	/^static __inline__  int  unix_read(int  fd, void*  buf, size_t  len)$/;"	f
unix_read	minadbd/sysdeps.h	409;"	d
unix_socketpair	minadbd/sysdeps.h	/^static __inline__ int  unix_socketpair( int  d, int  type, int  protocol, int sv[2] )$/;"	f
unix_write	minadbd/sysdeps.h	/^static __inline__  int  unix_write(int  fd, const void*  buf, size_t  len)$/;"	f
unix_write	minadbd/sysdeps.h	410;"	d
unlink	minadbd/sysdeps.h	102;"	d
unlink	minadbd/sysdeps.h	103;"	d
unlink	minadbd/sysdeps.h	392;"	d
unlink	minadbd/sysdeps.h	393;"	d
unmount	extendedcommands.c	/^    char unmount[255];$/;"	m	struct:__anon11	file:
unmount_mounted_volume	mounts.c	/^unmount_mounted_volume(const MountedVolume *volume)$/;"	f
unregister_usb_transport	minadbd/transport.c	/^void unregister_usb_transport(usb_handle *usb)$/;"	f
unyaffs_wrapper	nandroid.c	/^static int unyaffs_wrapper(const char* backup_file_image, const char* backup_path, int callback) {$/;"	f	file:
update_data	firmware.c	/^static const char *update_data = NULL;$/;"	v	file:
update_directory	recovery.c	/^update_directory(const char* path, const char* unmount_when_done) {$/;"	f	file:
update_fps	common.h	/^    int update_fps;$/;"	m	struct:__anon6
update_header	bootloader.c	/^struct update_header {$/;"	s	file:
update_length	firmware.c	/^static int update_length = 0;$/;"	v	file:
update_progress_locked	ui.c	/^static void update_progress_locked(void)$/;"	f	file:
update_screen_locked	ui.c	/^static void update_screen_locked(void)$/;"	f	file:
update_transports	minadbd/transport.c	/^void  update_transports(void)$/;"	f
update_type	firmware.c	/^static const char *update_type = NULL;$/;"	v	file:
updater_src_files	updater/Android.mk	/^updater_src_files := \\$/;"	m
usage	dedupe/dedupe.c	/^static void usage(char** argv) {$/;"	f	file:
usb	minadbd/adb.h	/^    usb_handle *usb;$/;"	m	struct:atransport
usb_cleanup	minadbd/usb_linux_client.c	/^void usb_cleanup()$/;"	f
usb_close	minadbd/usb_linux_client.c	/^int usb_close(usb_handle *h)$/;"	f
usb_connected	ui.c	/^static int usb_connected() {$/;"	f	file:
usb_handle	minadbd/adb.h	/^typedef struct usb_handle usb_handle;$/;"	t	typeref:struct:usb_handle
usb_handle	minadbd/usb_linux_client.c	/^struct usb_handle$/;"	s	file:
usb_init	minadbd/usb_linux_client.c	/^void usb_init()$/;"	f
usb_kick	minadbd/usb_linux_client.c	/^void usb_kick(usb_handle *h)$/;"	f
usb_open_thread	minadbd/usb_linux_client.c	/^static void *usb_open_thread(void *x)$/;"	f	file:
usb_read	minadbd/usb_linux_client.c	/^int usb_read(usb_handle *h, void *data, int len)$/;"	f
usb_write	minadbd/usb_linux_client.c	/^int usb_write(usb_handle *h, const void *data, int len)$/;"	f
utf8_mbtowc	minui/graphics.c	/^utf8_mbtowc(wchar_t *p, const char *s, int n)$/;"	f
utf8_table	minui/graphics.c	/^static struct utf8_table utf8_table[] =$/;"	v	typeref:struct:utf8_table	file:
utf8_table	minui/graphics.c	/^struct utf8_table {$/;"	s	file:
v	extendedcommands.c	/^    Volume* v;$/;"	m	struct:__anon11	file:
v	extendedcommands.c	/^    Volume* v;$/;"	m	struct:__anon12	file:
validFilename	minzip/Zip.c	/^static int validFilename(const char *fileName, unsigned int fileNameLen)$/;"	f	file:
verify_file	verifier.c	/^int verify_file(const char* path, const RSAPublicKey *pKeys, unsigned int numKeys) {$/;"	f
verify_root_and_recovery	extendedcommands.c	/^int verify_root_and_recovery() {$/;"	f
version	bootloader.c	/^    unsigned version;$/;"	m	struct:update_header	file:
version	updater/updater.h	/^    int version;$/;"	m	struct:__anon51
versionMadeBy	minzip/Zip.h	/^    int          versionMadeBy;$/;"	m	struct:ZipEntry
vfat_count	mmcutils/mmcutils.c	/^unsigned vfat_count = 0;$/;"	v
vfat_partitions	mmcutils/mmcutils.c	/^char *vfat_partitions[] = {"modem", "NONE"};$/;"	v
vi	minui/graphics.c	/^static struct fb_var_screeninfo vi;$/;"	v	typeref:struct:fb_var_screeninfo	file:
vibrate	ui.c	/^int vibrate(int timeout_ms) {$/;"	f
volume_count	mounts.c	/^    int volume_count;$/;"	m	struct:__anon47	file:
volume_for_path	roots.c	/^Volume* volume_for_path(const char* path) {$/;"	f
volume_main	extendedcommands.c	/^int volume_main(int argc, char **argv) {$/;"	f
volumes	mounts.c	/^    MountedVolume *volumes;$/;"	m	struct:__anon47	file:
volumes_allocd	mounts.c	/^    int volumes_allocd;$/;"	m	struct:__anon47	file:
w	make-overlay.py	/^w = maxmaxi - minmini + 1$/;"	v
wait_for_device	bootloader.c	/^static void wait_for_device(const char* fn) {$/;"	f	file:
width	minui/courier_extended_15x24.h	/^  unsigned width;$/;"	m	struct:__anon27
width	minui/font_10x18.h	/^  unsigned width;$/;"	m	struct:__anon23
width	minui/font_7x16.h	/^  unsigned width;$/;"	m	struct:__anon38
width	minui/roboto_10x18.h	/^  unsigned width;$/;"	m	struct:__anon29
width	minui/roboto_15x24.h	/^  unsigned width;$/;"	m	struct:__anon32
width	minui/roboto_23x41.h	/^  unsigned width;$/;"	m	struct:__anon30
win_thread_func_t	minadbd/sysdeps.h	/^typedef  void (*win_thread_func_t)(void*  arg);$/;"	t
windowBits	applypatch/imgdiff.c	/^  int level, method, windowBits, memLevel, strategy;$/;"	m	struct:__anon2	file:
wipe_battery_stats	extendedcommands.c	/^void wipe_battery_stats()$/;"	f
wipe_data	recovery.c	/^wipe_data(int confirm) {$/;"	f	file:
write	minadbd/sysdeps.h	138;"	d
write	minadbd/sysdeps.h	139;"	d
write	minadbd/sysdeps.h	378;"	d
write	minadbd/sysdeps.h	379;"	d
writeProcessFunction	minzip/Zip.c	/^static bool writeProcessFunction(const unsigned char *data, int dataLen,$/;"	f	file:
write_block	mtdutils/mtdutils.c	/^static int write_block(MtdWriteContext *ctx, const char *data)$/;"	f	file:
write_fds	minadbd/fdevent.c	/^static fd_set write_fds;$/;"	v	file:
write_fstab_root	extendedcommands.c	/^void write_fstab_root(char *path, FILE *file)$/;"	f
write_packet	minadbd/transport.c	/^write_packet(int  fd, const char* name, apacket** ppacket)$/;"	f	file:
write_raw_image_cb	updater/install.c	/^static bool write_raw_image_cb(const unsigned char* data,$/;"	f	file:
write_string_to_file	extendedcommands.c	/^void write_string_to_file(const char* filename, const char* string) {$/;"	f
write_tagged	tools/ota/add-property-tag.c	/^void write_tagged(FILE *out, const char *line, const char *tag, int number) {$/;"	f
write_to_remote	minadbd/adb.h	/^    int (*write_to_remote)(apacket *p, atransport *t);$/;"	m	struct:atransport
write_update_for_bootloader	bootloader.c	/^int write_update_for_bootloader($/;"	f
writex	minadbd/transport.c	/^int writex(int fd, const void *ptr, size_t len)$/;"	f
zipDir	minzip/Zip.c	/^    const char *zipDir;$/;"	m	struct:__anon42	file:
zipDirLen	minzip/Zip.c	/^    int zipDirLen;$/;"	m	struct:__anon42	file:
